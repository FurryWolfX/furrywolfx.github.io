import{_ as s,o as a,c as n,Q as p}from"./chunks/framework.a5795de3.js";const g=JSON.parse('{"title":"React-Navigation 使用笔记","description":"","frontmatter":{"title":"React-Navigation 使用笔记","catalog":true,"date":"2017-10-25T16:50:24.000Z","subtitle":null,"header-img":null,"tags":["React-Native","React"],"recommend":"React-Native"},"headers":[],"relativePath":"docs/frontend/hybird/react-navigation-note.md","filePath":"docs/frontend/hybird/react-navigation-note.md"}'),l={name:"docs/frontend/hybird/react-navigation-note.md"},o=p(`<h1 id="react-navigation-使用笔记" tabindex="-1">React-Navigation 使用笔记 <a class="header-anchor" href="#react-navigation-使用笔记" aria-label="Permalink to &quot;React-Navigation 使用笔记&quot;">​</a></h1><h2 id="react-navigation-之自定义-header" tabindex="-1">React-Navigation 之自定义 Header <a class="header-anchor" href="#react-navigation-之自定义-header" aria-label="Permalink to &quot;React-Navigation 之自定义 Header&quot;">​</a></h2><p><code>React-Native</code> 的新版本取消了 <code>navigator</code>，使用了新的 <code>React-Navigation</code> 组件。这个组件非常强大。</p><p>但是有的时候我们需要自定义 <code>Header</code>，又不想在每个 <code>View</code> 上附带 <code>Header</code>，而是想要实现原生的效果（即 <code>Header</code> 是一个独立的层，和视图无关）。</p><p>参考官方文档：</p><p>普通用法：在每个<code>StackNavigator</code>管理的视图<code>class</code>中加入<code>static</code>属性</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">static navigationOptions </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  title: </span><span style="color:#9ECBFF;">&#39;Home&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">static navigationOptions </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  title: </span><span style="color:#032F62;">&#39;Home&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>自定义用法：这里的 <code>Header</code> 是一个自定义组件</p><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">static </span><span style="color:#B392F0;">navigationOptions</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">header</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#79B8FF;">Header</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">title</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;首页&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">showBack</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">}&gt;&lt;/</span><span style="color:#79B8FF;">Header</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">static </span><span style="color:#6F42C1;">navigationOptions</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">header</span><span style="color:#24292E;">: () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> &lt;</span><span style="color:#005CC5;">Header</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">title</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;首页&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">showBack</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">}&gt;&lt;/</span><span style="color:#005CC5;">Header</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>注意，如果用 <code>Redux</code> 管理了 <code>navigation</code>，那么自定义的 <code>Header</code> 中需要 <code>connect</code> 一下 <code>nav</code> 中的 <code>dispatch</code> 方法。</p><p>自定义用法的参数传递：</p><p>传递</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 直接用 NavigationActions</span></span>
<span class="line"><span style="color:#E1E4E8;">NavigationActions.</span><span style="color:#B392F0;">navigate</span><span style="color:#E1E4E8;">({ routeName: </span><span style="color:#9ECBFF;">&quot;AMap&quot;</span><span style="color:#E1E4E8;">, params: { title: </span><span style="color:#9ECBFF;">&quot;地图&quot;</span><span style="color:#E1E4E8;"> } });</span></span>
<span class="line"><span style="color:#6A737D;">// 结合 redux</span></span>
<span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.props.</span><span style="color:#B392F0;">dispatch</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  NavigationActions.</span><span style="color:#B392F0;">navigate</span><span style="color:#E1E4E8;">({ routeName: </span><span style="color:#9ECBFF;">&quot;AMap&quot;</span><span style="color:#E1E4E8;">, params: { title: </span><span style="color:#9ECBFF;">&quot;地图&quot;</span><span style="color:#E1E4E8;"> } })</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 直接用 NavigationActions</span></span>
<span class="line"><span style="color:#24292E;">NavigationActions.</span><span style="color:#6F42C1;">navigate</span><span style="color:#24292E;">({ routeName: </span><span style="color:#032F62;">&quot;AMap&quot;</span><span style="color:#24292E;">, params: { title: </span><span style="color:#032F62;">&quot;地图&quot;</span><span style="color:#24292E;"> } });</span></span>
<span class="line"><span style="color:#6A737D;">// 结合 redux</span></span>
<span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.props.</span><span style="color:#6F42C1;">dispatch</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  NavigationActions.</span><span style="color:#6F42C1;">navigate</span><span style="color:#24292E;">({ routeName: </span><span style="color:#032F62;">&quot;AMap&quot;</span><span style="color:#24292E;">, params: { title: </span><span style="color:#032F62;">&quot;地图&quot;</span><span style="color:#24292E;"> } })</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>接收</p><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">static </span><span style="color:#B392F0;">navigationOptions</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ({</span><span style="color:#FFAB70;">navigation</span><span style="color:#E1E4E8;">}) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">header</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#79B8FF;">Header</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">title</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{navigation.state.params.title}&gt;&lt;/</span><span style="color:#79B8FF;">Header</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">static </span><span style="color:#6F42C1;">navigationOptions</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ({</span><span style="color:#E36209;">navigation</span><span style="color:#24292E;">}) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">header</span><span style="color:#24292E;">: () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> &lt;</span><span style="color:#005CC5;">Header</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">title</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{navigation.state.params.title}&gt;&lt;/</span><span style="color:#005CC5;">Header</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>解构出 <code>navigation</code> 属性，通过 <code>navigation.state.params</code> 来获取传递的数据。</p><h2 id="react-navigation-之传递参数到自定义-header" tabindex="-1">React-Navigation 之传递参数到自定义 Header <a class="header-anchor" href="#react-navigation-之传递参数到自定义-header" aria-label="Permalink to &quot;React-Navigation 之传递参数到自定义 Header&quot;">​</a></h2><p>在 <code>React-Navigation</code> 中，定义 <code>Header</code> 是通过 <code>static</code> 属性来定义的，这样导致 <code>class</code> 中的 <code>this</code> 无法获取。与 <code>this.state</code> 的通信形成了障碍。</p><p>解决这个问题的方式有 2 种，第一种是由 <code>redux</code> 控制 <code>Header</code> 的状态和事件，第二种是通过 <code>navigation.state.params</code> 传递。</p><p>第一种是一种通用方法，不再阐述。</p><p>第二种，通过 <code>params</code> 传递：</p><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">static </span><span style="color:#B392F0;">navigationOptions</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ({ </span><span style="color:#FFAB70;">navigation</span><span style="color:#E1E4E8;"> }) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">params</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {} } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> navigation.state;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">header</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#79B8FF;">Header</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">showBack</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">title</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{params.navTitle}</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">rightIcon</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{&lt;</span><span style="color:#79B8FF;">Image</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">style</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{{ width: </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">, height: </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;"> }} </span><span style="color:#B392F0;">source</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{searchIcon}&gt;&lt;/</span><span style="color:#79B8FF;">Image</span><span style="color:#E1E4E8;">&gt;}</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">onRightIconPress</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{params.onSearchPress}&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;/</span><span style="color:#79B8FF;">Header</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">static </span><span style="color:#6F42C1;">navigationOptions</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ({ </span><span style="color:#E36209;">navigation</span><span style="color:#24292E;"> }) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">params</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {} } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> navigation.state;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">header</span><span style="color:#24292E;">: () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> &lt;</span><span style="color:#005CC5;">Header</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">showBack</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">title</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{params.navTitle}</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">rightIcon</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{&lt;</span><span style="color:#005CC5;">Image</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">style</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{{ width: </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">, height: </span><span style="color:#005CC5;">20</span><span style="color:#24292E;"> }} </span><span style="color:#6F42C1;">source</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{searchIcon}&gt;&lt;/</span><span style="color:#005CC5;">Image</span><span style="color:#24292E;">&gt;}</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">onRightIconPress</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{params.onSearchPress}&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;/</span><span style="color:#005CC5;">Header</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 在 class 中</span></span>
<span class="line"><span style="color:#B392F0;">componentDidMount</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.props.navigation.</span><span style="color:#B392F0;">setParams</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">onSearchPress</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">onSearchPress</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">      navTitle: </span><span style="color:#9ECBFF;">&#39;首页&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 在 class 中</span></span>
<span class="line"><span style="color:#6F42C1;">componentDidMount</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.props.navigation.</span><span style="color:#6F42C1;">setParams</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">onSearchPress</span><span style="color:#24292E;">: () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">onSearchPress</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">      navTitle: </span><span style="color:#032F62;">&#39;首页&#39;</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="react-navigation-之修改-stacknavigator-过渡动画" tabindex="-1">React-Navigation 之修改 StackNavigator 过渡动画 <a class="header-anchor" href="#react-navigation-之修改-stacknavigator-过渡动画" aria-label="Permalink to &quot;React-Navigation 之修改 StackNavigator 过渡动画&quot;">​</a></h2><p>默认情况下不能修改，修改引入 <code>CardStackStyleInterpolator</code>，这个模块在不同版本的库中位置不同。</p><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> CardStackStyleInterpolator </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;react-navigation/src/views/CardStack/CardStackStyleInterpolator&quot;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> CardStackStyleInterpolator </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;react-navigation/src/views/CardStack/CardStackStyleInterpolator&quot;</span><span style="color:#24292E;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>在配置中加入</p><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">AppRouteConfigs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  Main: { screen: MainView },</span></span>
<span class="line"><span style="color:#E1E4E8;">  AMap: { screen: AMap },</span></span>
<span class="line"><span style="color:#E1E4E8;">  Login: { screen: Login },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 路由配置</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">AppNavigator</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StackNavigator</span><span style="color:#E1E4E8;">(AppRouteConfigs, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  initialRouteName: </span><span style="color:#9ECBFF;">&quot;Main&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  headerMode: </span><span style="color:#9ECBFF;">&quot;float&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">transitionConfig</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> ({</span></span>
<span class="line"><span style="color:#E1E4E8;">    screenInterpolator: CardStackStyleInterpolator.forHorizontal,</span></span>
<span class="line"><span style="color:#E1E4E8;">  }),</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">AppRouteConfigs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  Main: { screen: MainView },</span></span>
<span class="line"><span style="color:#24292E;">  AMap: { screen: AMap },</span></span>
<span class="line"><span style="color:#24292E;">  Login: { screen: Login },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 路由配置</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">AppNavigator</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StackNavigator</span><span style="color:#24292E;">(AppRouteConfigs, {</span></span>
<span class="line"><span style="color:#24292E;">  initialRouteName: </span><span style="color:#032F62;">&quot;Main&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  headerMode: </span><span style="color:#032F62;">&quot;float&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">transitionConfig</span><span style="color:#24292E;">: () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> ({</span></span>
<span class="line"><span style="color:#24292E;">    screenInterpolator: CardStackStyleInterpolator.forHorizontal,</span></span>
<span class="line"><span style="color:#24292E;">  }),</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p><code>react-navigation</code> 一共提供了 4 种跳转动画：</p><ol><li>从右向左： <code>forHorizontal</code>；</li><li>从下向上： <code>forVertical</code>；</li><li>安卓那种的从下向上： <code>forFadeFromBottomAndroid</code>；</li><li>无动画： <code>forInitial</code>。</li></ol>`,30),e=[o];function t(c,r,i,E,y,d){return a(),n("div",null,e)}const b=s(l,[["render",t]]);export{g as __pageData,b as default};
