import{_ as a,c as e,o as s,a4 as t}from"./chunks/framework.VzvPGsLx.js";const k=JSON.parse('{"title":"如何在微信小程序中使用 ES7 特性 async/await","description":"","frontmatter":{"title":"如何在微信小程序中使用 ES7 特性 async/await","date":"2017-11-14T16:50:24.000Z","tags":["Wechat"]},"headers":[],"relativePath":"docs/frontend/hybird/weapps-async-await.md","filePath":"docs/frontend/hybird/weapps-async-await.md"}'),i={name:"docs/frontend/hybird/weapps-async-await.md"},n=t('<h1 id="如何在微信小程序中使用-es7-特性-async-await" tabindex="-1">如何在微信小程序中使用 ES7 特性 async/await <a class="header-anchor" href="#如何在微信小程序中使用-es7-特性-async-await" aria-label="Permalink to &quot;如何在微信小程序中使用 ES7 特性 async/await&quot;">​</a></h1><h2 id="引入-generator-支撑库" tabindex="-1">引入 generator 支撑库 <a class="header-anchor" href="#引入-generator-支撑库" aria-label="Permalink to &quot;引入 generator 支撑库&quot;">​</a></h2><p>经过 Babel 转译后的代码，会把 <code>aysnc/await</code> 的功能通过类似 <code>co</code> 库的方式来实现，即要使用到 generator，所以，和我们使用 <code>co</code> 的时候一样，需要依赖一个 <code>regeneratorRuntime</code>，才能支持 <code>generator</code> 特性。我们可以使用 Facebook 开源的 <code>regenerator</code> 库。你可以通过 npm 来下载这个 regenerator 库：</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> regenerator</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>然后将下载文件中名为 <code>regenerator-runtime</code> 的文件拿出来，放到我们的小程序代码中去。</p><h2 id="引入代码" tabindex="-1">引入代码 <a class="header-anchor" href="#引入代码" aria-label="Permalink to &quot;引入代码&quot;">​</a></h2><p>在需要使用 <code>async/await</code> 特性的代码文件中，引入 <code>regenerator</code> 库：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> regeneratorRuntime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;../../utils/regenerator-runtime/runtime-module.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>然后，你就可以放心的在你的代码里使用 <code>async/await</code> 来写异步处理了。</p>',9),r=[n];function o(c,d,p,l,h,u){return s(),e("div",null,r)}const m=a(i,[["render",o]]);export{k as __pageData,m as default};
