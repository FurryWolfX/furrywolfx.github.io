import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.a1e87edc.js";const h=JSON.parse('{"title":"很有用的 Git 命令","description":"","frontmatter":{"title":"很有用的 Git 命令","catalog":true,"date":"2017-06-27T16:50:24.000Z","subtitle":null,"header-img":null,"tags":["Git"]},"headers":[],"relativePath":"docs/other/useful-git-cmds.md","filePath":"docs/other/useful-git-cmds.md"}'),p={name:"docs/other/useful-git-cmds.md"},e=l(`<h1 id="很有用的-git-命令" tabindex="-1">很有用的 Git 命令 <a class="header-anchor" href="#很有用的-git-命令" aria-label="Permalink to &quot;很有用的 Git 命令&quot;">​</a></h1><div class="info custom-block"><p class="custom-block-title">INFO</p><p>迄今，我已经使用 <code>Git</code> 很长一段时间了，考虑分享一些不管你是团队开发还是个人项目，都受用的高级 <code>git</code> 命令。</p></div><h2 id="输出最后一次提交的改变" tabindex="-1">输出最后一次提交的改变 <a class="header-anchor" href="#输出最后一次提交的改变" aria-label="Permalink to &quot;输出最后一次提交的改变&quot;">​</a></h2><p>这个命令，我经常使用它 来发送其他没有使用 git 的人来检查或者集成所修改的。它会输出最近提交的修改内容到一个 zip 文件中。</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">archive</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-o</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">../updated.zip</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">HEAD</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">$(</span><span style="color:#B392F0;">git</span><span style="color:#9ECBFF;"> diff </span><span style="color:#79B8FF;">--name-only</span><span style="color:#9ECBFF;"> HEAD^)</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">archive</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-o</span><span style="color:#24292E;"> </span><span style="color:#032F62;">../updated.zip</span><span style="color:#24292E;"> </span><span style="color:#032F62;">HEAD</span><span style="color:#24292E;"> </span><span style="color:#032F62;">$(</span><span style="color:#6F42C1;">git</span><span style="color:#032F62;"> diff </span><span style="color:#005CC5;">--name-only</span><span style="color:#032F62;"> HEAD^)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="输出两个提交间的改变" tabindex="-1">输出两个提交间的改变 <a class="header-anchor" href="#输出两个提交间的改变" aria-label="Permalink to &quot;输出两个提交间的改变&quot;">​</a></h2><p>类似的，如果你需要输出某两个提交间的改变时，你可以使用这个。</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">archive</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-o</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">../latest.zip</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">NEW_COMMIT_ID_HERE</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">$(</span><span style="color:#B392F0;">git</span><span style="color:#9ECBFF;"> diff </span><span style="color:#79B8FF;">--name-only</span><span style="color:#9ECBFF;"> OLD_COMMIT_ID_HERE NEW_COMMIT_ID_HERE)</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">archive</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-o</span><span style="color:#24292E;"> </span><span style="color:#032F62;">../latest.zip</span><span style="color:#24292E;"> </span><span style="color:#032F62;">NEW_COMMIT_ID_HERE</span><span style="color:#24292E;"> </span><span style="color:#032F62;">$(</span><span style="color:#6F42C1;">git</span><span style="color:#032F62;"> diff </span><span style="color:#005CC5;">--name-only</span><span style="color:#032F62;"> OLD_COMMIT_ID_HERE NEW_COMMIT_ID_HERE)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="克隆-指定的远程分支" tabindex="-1">克隆 指定的远程分支 <a class="header-anchor" href="#克隆-指定的远程分支" aria-label="Permalink to &quot;克隆 指定的远程分支&quot;">​</a></h2><p>如果你渴望只克隆远程仓库的一个指定分支，而不是整个仓库分支，这对你帮助很大。</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">init</span></span>
<span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">remote</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">add</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-t</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">BRANCH_NAME_HERE</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-f</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">origin</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">REMOTE_REPO_URL_PATH_HERE</span></span>
<span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">checkout</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">BRANCH_NAME_HERE</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">init</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">remote</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-t</span><span style="color:#24292E;"> </span><span style="color:#032F62;">BRANCH_NAME_HERE</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-f</span><span style="color:#24292E;"> </span><span style="color:#032F62;">origin</span><span style="color:#24292E;"> </span><span style="color:#032F62;">REMOTE_REPO_URL_PATH_HERE</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">checkout</span><span style="color:#24292E;"> </span><span style="color:#032F62;">BRANCH_NAME_HERE</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="应用-从不相关的本地仓库来的补丁" tabindex="-1">应用 从不相关的本地仓库来的补丁 <a class="header-anchor" href="#应用-从不相关的本地仓库来的补丁" aria-label="Permalink to &quot;应用 从不相关的本地仓库来的补丁&quot;">​</a></h2><p>如果你需要其它一些不相关的本地仓库作为你现在仓库的补丁，这里就是通往那里的捷径。</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--git-dir=PATH_TO_OTHER_REPOSITORY_HERE/.git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">format-patch</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-k</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-1</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--stdout</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">COMMIT_HASH_ID_HERE</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">am</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-3</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-k</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--git-dir=PATH_TO_OTHER_REPOSITORY_HERE/.git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">format-patch</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-k</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-1</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--stdout</span><span style="color:#24292E;"> </span><span style="color:#032F62;">COMMIT_HASH_ID_HERE</span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">am</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-3</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-k</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="检测-你的分支的改变是否为其它分支的一部分" tabindex="-1">检测 你的分支的改变是否为其它分支的一部分 <a class="header-anchor" href="#检测-你的分支的改变是否为其它分支的一部分" aria-label="Permalink to &quot;检测 你的分支的改变是否为其它分支的一部分&quot;">​</a></h2><p><code>cherry</code> 命令让我们检测你的分支的改变是否出现在其它一些分支中。它通过 + 或者 - 符号来显示从当前分支与所给的分支之间的改变：是否合并了 (<code>merged</code>)。.+ 指示没有出现在所给分支中，反之，- 就表示出现在了所给的分支中了。这里就是如何去检测：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cherry</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-v</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">OTHER_BRANCH_NAME_HERE</span></span>
<span class="line"><span style="color:#6A737D;">#例如：检测 master 分支</span></span>
<span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cherry</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-v</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">master</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cherry</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-v</span><span style="color:#24292E;"> </span><span style="color:#032F62;">OTHER_BRANCH_NAME_HERE</span></span>
<span class="line"><span style="color:#6A737D;">#例如：检测 master 分支</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cherry</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-v</span><span style="color:#24292E;"> </span><span style="color:#032F62;">master</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="开始一个无历史的新分支" tabindex="-1">开始一个无历史的新分支 <a class="header-anchor" href="#开始一个无历史的新分支" aria-label="Permalink to &quot;开始一个无历史的新分支&quot;">​</a></h2><p>有时，你需要开始一个新分支，但是又不想把很长很长的历史记录带进来，例如，你想在公众区域（开源）放置你的代码，但是又不想别人知道它的历史记录。</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">checkout</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--orphan</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">NEW_BRANCH_NAME_HERE</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">checkout</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--orphan</span><span style="color:#24292E;"> </span><span style="color:#032F62;">NEW_BRANCH_NAME_HERE</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="无切换分支的从其它分支-checkout-文件" tabindex="-1">无切换分支的从其它分支 Checkout 文件 <a class="header-anchor" href="#无切换分支的从其它分支-checkout-文件" aria-label="Permalink to &quot;无切换分支的从其它分支 Checkout 文件&quot;">​</a></h2><p>不想切换分支，但是又想从其它分支中获得你需要的文件：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">checkout</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">BRANCH_NAME_HERE</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">PATH_TO_FILE_IN_BRANCH_HERE</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">checkout</span><span style="color:#24292E;"> </span><span style="color:#032F62;">BRANCH_NAME_HERE</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">PATH_TO_FILE_IN_BRANCH_HERE</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="忽略已追踪文件的变动" tabindex="-1">忽略已追踪文件的变动 <a class="header-anchor" href="#忽略已追踪文件的变动" aria-label="Permalink to &quot;忽略已追踪文件的变动&quot;">​</a></h2><p>如果您正在一个团队中工作，而且大家都在同一条 branch 上面工作，那么您很有可能会经常用到 <code>fetch</code> 和 <code>merge</code>。但是有时候这样会重置您的环境配置文件，如此的话，您就得在每次 <code>merge</code> 后修改它。使用这一命令，您就能要求 git 忽视指定文件的变动。这样，下回你再 <code>merge</code> 的话，这个文件就不会被修改了。</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">update-index</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--assume-unchanged</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">PATH_TO_FILE_HERE</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">update-index</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--assume-unchanged</span><span style="color:#24292E;"> </span><span style="color:#032F62;">PATH_TO_FILE_HERE</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="检查提交的变动是否是-release-的一部分" tabindex="-1">检查提交的变动是否是 release 的一部分 <a class="header-anchor" href="#检查提交的变动是否是-release-的一部分" aria-label="Permalink to &quot;检查提交的变动是否是 release 的一部分&quot;">​</a></h2><p><code>name-rev</code> 命令能告诉您一个 <code>commit</code> 相对于最近一次 <code>release</code> 的位置。使用这条命令，您就可以检查您所做出的改动是否是 <code>release</code> 的一部分了。</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">name-rev</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--name-only</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">COMMIT_HASH_HERE</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">name-rev</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--name-only</span><span style="color:#24292E;"> </span><span style="color:#032F62;">COMMIT_HASH_HERE</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="使用-rebase-推送而非-merge" tabindex="-1">使用 rebase 推送而非 merge <a class="header-anchor" href="#使用-rebase-推送而非-merge" aria-label="Permalink to &quot;使用 rebase 推送而非 merge&quot;">​</a></h2><p>如果您正在团队中工作并且整个团队都在同一条 <code>branch</code> 上面工作，那么您就得经常地进行 <code>fetch/merge</code> 或者 <code>pull</code>。 Git 中，分支的合并以所提交的 <code>merge</code> 来记录，以此表明一条 feature 分支何时与主分支合并。 但是在多团队成员共同工作于一条 <code>branch</code> 的情形中，常规的 merge 会导致 log 中出现多条消息，从而产生混淆。因此，您可以在 <code>pull</code> 的时候使用 <code>rebase</code>，以此来减少无用的 <code>merge</code> 消息，从而保持历史记录的清晰。</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pull</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--rebase</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pull</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--rebase</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>您也可以将某条 <code>branch</code> 配置为总是使用 <code>rebase</code> 推送：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">config</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">branch.BRANCH_NAME_HERE.rebase</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">config</span><span style="color:#24292E;"> </span><span style="color:#032F62;">branch.BRANCH_NAME_HERE.rebase</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="导出差量更新包" tabindex="-1">导出差量更新包 <a class="header-anchor" href="#导出差量更新包" aria-label="Permalink to &quot;导出差量更新包&quot;">​</a></h2><p>通过<code>git diff</code>得到差异列表</p><p>通过<code>git archive</code>打包</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">archive</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-o</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">yourZipName.zip</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">HEAD</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">$(</span><span style="color:#B392F0;">git</span><span style="color:#9ECBFF;"> diff copyID1 copyID2 </span><span style="color:#79B8FF;">--name-only</span><span style="color:#9ECBFF;">)</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">archive</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-o</span><span style="color:#24292E;"> </span><span style="color:#032F62;">yourZipName.zip</span><span style="color:#24292E;"> </span><span style="color:#032F62;">HEAD</span><span style="color:#24292E;"> </span><span style="color:#032F62;">$(</span><span style="color:#6F42C1;">git</span><span style="color:#032F62;"> diff copyID1 copyID2 </span><span style="color:#005CC5;">--name-only</span><span style="color:#032F62;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="清理缓存-并更新-gitignore" tabindex="-1">清理缓存，并更新 gitignore <a class="header-anchor" href="#清理缓存-并更新-gitignore" aria-label="Permalink to &quot;清理缓存，并更新 gitignore&quot;">​</a></h2><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rm</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-r</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--cached</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.</span></span>
<span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">add</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.</span></span>
<span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">commit</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-m</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;update .gitignore&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rm</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-r</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--cached</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">commit</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-m</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;update .gitignore&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>`,40),o=[e];function c(t,r,i,E,y,d){return a(),n("div",null,o)}const u=s(p,[["render",c]]);export{h as __pageData,u as default};
