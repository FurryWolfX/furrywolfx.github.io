import{_ as n,c as e,l as s,a,a4 as t,o as i}from"./chunks/framework.VzvPGsLx.js";const A=JSON.parse('{"title":"0106. 从中序与后序遍历序列构造二叉树","description":"","frontmatter":{"title":"0106. 从中序与后序遍历序列构造二叉树","date":"2024-05-08T00:00:00.000Z","tags":["LeetCode"]},"headers":[],"relativePath":"docs/leetcode/0106.construct-binary-tree-from-preorder-and-inorder-traversal.md","filePath":"docs/leetcode/0106.construct-binary-tree-from-preorder-and-inorder-traversal.md"}'),l={name:"docs/leetcode/0106.construct-binary-tree-from-preorder-and-inorder-traversal.md"},r=t("",27),p={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},o={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"5.495ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 2429 1000","aria-hidden":"true"},d=t("",1),h=[d],c=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"N"),s("mo",{stretchy:"false"},")")])],-1),k={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},m={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"5.495ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 2429 1000","aria-hidden":"true"},g=t("",1),Q=[g],T=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"N"),s("mo",{stretchy:"false"},")")])],-1),u=s("blockquote",null,[s("p",null,"空间复杂度忽略了开辟数组的内存消耗。")],-1),b=s("h2",{id:"相关",tabindex:"-1"},[a("相关 "),s("a",{class:"header-anchor",href:"#相关","aria-label":'Permalink to "相关"'},"​")],-1),y=s("ul",null,[s("li",null,[s("a",{href:"./0105.construct-binary-tree-from-inorder-and-postorder-traversal.html"},"105. 从前序与中序遍历序列构造二叉树")]),s("li",null,[s("a",{href:"./0889.construct-binary-tree-from-preorder-and-postorder-traversal.html"},"889. 根据前序和后序遍历构造二叉树")])],-1);function _(E,f,x,v,w,F){return i(),e("div",null,[r,s("ul",null,[s("li",null,[a("时间复杂度：由于每次递归我们的 inorder 和 postorder 的总数都会减 1，因此我们要递归 N 次，故时间复杂度为 "),s("mjx-container",p,[(i(),e("svg",o,h)),c]),a("，其中 N 为节点个数。")]),s("li",null,[a("空间复杂度：我们使用了递归，也就是借助了额外的栈空间来完成， 由于栈的深度为 N，因此总的空间复杂度为 "),s("mjx-container",k,[(i(),e("svg",m,Q)),T]),a("，其中 N 为节点个数。")])]),u,b,y])}const D=n(l,[["render",_]]);export{A as __pageData,D as default};
