import{_ as l,c as i,l as s,a,a4 as n,o as e}from"./chunks/framework.VzvPGsLx.js";const M=JSON.parse('{"title":"算法专题：二分法（上）","description":"","frontmatter":{"title":"算法专题：二分法（上）","date":"2024-05-17T00:00:00.000Z","tags":["LeetCode"]},"headers":[],"relativePath":"docs/leetcode/thinkings/binary-search-1.md","filePath":"docs/leetcode/thinkings/binary-search-1.md"}'),p={name:"docs/leetcode/thinkings/binary-search-1.md"},t=n('<h1 id="算法专题-二分法-上" tabindex="-1">算法专题：二分法（上） <a class="header-anchor" href="#算法专题-二分法-上" aria-label="Permalink to &quot;算法专题：二分法（上）&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p><img src="https://imgs-1251264059.cos.ap-chengdu.myqcloud.com/picgo-v3/a6927c716dd584fe05b87339fb0b5e7d.jpg" alt=""></p><p>本系列包含以下专题：</p><ul><li><a href="./linked-list.html">链表</a></li><li><a href="./tree.html">树</a></li><li><a href="./heap.html">堆</a></li><li><a href="./heap-2.html">堆 2</a></li><li><a href="./binary-search-2.html">二分法（下）</a></li></ul><h2 id="前言-1" tabindex="-1">前言 <a class="header-anchor" href="#前言-1" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>为了准备这个专题，我不仅肝完了力扣的所有二分题目，还肝完了另外一个 OJ 网站 - Binary Search 的所有二分题目，一共<strong>100 多道</strong>。大家看完如果觉得有用，可以通过点赞转发的方式告诉我，如果喜欢的人多，我继续尽快出下篇哦~</p><p>二分查找又称<code>折半搜索算法</code>。 狭义地来讲，二分查找是一种在有序数组查找某一特定元素的搜索算法。这同时也是大多数人所知道的一种说法。实际上， 广义的二分查找是将问题的规模缩小到原有的一半。类似的，三分法就是将问题规模缩小为原来的 1/3。</p><p>本文给大家带来的内容则是<code>狭义地二分查找</code>，如果想了解其他广义上的二分查找可以查看我之前写的一篇博文 <a href="./../91/laoshushidu.html">从老鼠试毒问题来看二分法</a></p><blockquote><p>尽管二分查找的基本思想相对简单，但细节可以令人难以招架 ... — 高德纳</p></blockquote><p>当乔恩·本特利将二分搜索问题布置给专业编程课的学生时，百分之 90 的学生在花费数小时后还是无法给出正确的解答，主要因为这些错误程序在面对边界值的时候无法运行，或返回错误结果。1988 年开展的一项研究显示，20 本教科书里只有 5 本正确实现了二分搜索。不仅如此，本特利自己 1986 年出版的《编程珠玑》一书中的二分搜索算法存在整数溢出的问题，二十多年来无人发现。Java 语言的库所实现的二分搜索算法中同样的溢出问题存在了九年多才被修复。</p><p>可见二分查找并不简单， 本文就试图带你走近 ta，明白 ta 的底层逻辑，并提供模板帮助大家写书 bug free 的二分查找代码。看完讲义后建议大家结合 <a href="https://leetcode-cn.com/leetbook/read/binary-search" title="LeetCode Book 二分查找" target="_blank" rel="noreferrer">LeetCode Book 二分查找</a> 练习一下。</p><h2 id="基本概念" tabindex="-1">基本概念 <a class="header-anchor" href="#基本概念" aria-label="Permalink to &quot;基本概念&quot;">​</a></h2><p>首先我们要知道几个基本概念。这些概念对学习二分有着很重要的作用，之后遇到这些概念就不再讲述了，默认大家已经掌握。</p><h3 id="解空间" tabindex="-1">解空间 <a class="header-anchor" href="#解空间" aria-label="Permalink to &quot;解空间&quot;">​</a></h3>',15),r=s("strong",null,"题目所有可能的解构成的集合",-1),h=s("code",null,"1,2,3,4,5",-1),o=s("code",null,"1，2，3，4，5",-1),k=s("strong",null,"一个数",-1),d=s("code",null,"1,2,3,4,5",-1),c=s("strong",null,"我们的目标就是在某个具体的情况判断其具体是哪个",-1),g={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},m={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"4.844ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 2141 1000","aria-hidden":"true"},u=n('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(1752,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width:3;"></path></g></g></g>',1),b=[u],E=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",{stretchy:"false"},")")])],-1),y=n("<p>举了例子：</p><p>如果让你在一个数组 <code>nums</code> 中查找 <code>target</code>，如果存在则返回对应索引，如果不存在则返回 <code>-1</code>。那么对于这道题来说其解空间是什么？</p><p>很明显解空间是区间 <code>[-1, n-1]</code>，其中 <code>n</code> 为 <code>nums</code> 的长度。</p><p>需要注意的是上面题目的解空间只可能是区间 <code>[-1,n-1]</code> 之间的整数。而诸如 <code>1.2</code> 这样的小数是不可能存在的。这其实也是大多数二分的情况。 但也有少部分题目解空间包括小数的。如果解空间包括小数，就可能会涉及到精度问题，这一点大家需要注意。</p>",4),T=s("code",null,"x",-1),_={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},Q={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.05ex"},xmlns:"http://www.w3.org/2000/svg",width:"4.826ex",height:"1.872ex",role:"img",focusable:"false",viewBox:"0 -805.3 2133.1 827.3","aria-hidden":"true"},F=n('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(1033,393.1) scale(0.707)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mn" transform="translate(1633.1,0)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" style="stroke-width:3;"></path></g></g></g>',1),x=[F],f=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("msup",null,[s("mn",null,"10"),s("mo",null,"−")]),s("mn",null,"6")])],-1),A=s("code",null,"[1,x]",-1),v=n(`<ol><li>更新答案的步长。 比如之前的更新是 <code>l = mid + 1</code>，现在<strong>可能</strong>就不行了，因此这样<strong>可能</strong>会错过正确解，比如正确解恰好就在区间 <code>[mid,mid+1]</code> 内的某一个小数。</li><li>判断条件时候需要考虑误差。由于精度的问题，判断的结束条件可能就要变成 <strong>与答案的误差在某一个范围内</strong>。</li></ol><p>对于<strong>搜索类题目</strong>，解空间一定是有限的，不然问题不可解。对于搜索类问题，第一步就是需要明确解空间，这样你才能够在解空间内进行搜索。这个技巧不仅适用于二分法，只要是搜索问题都可以使用，比如 DFS，BFS 以及回溯等。只不过对于二分法来说，<strong>明确解空间显得更为重要</strong>。如果现在还不理解这句话也没关系，看完本文或许你就理解了。</p><p>定义解空间的时候的一个原则是： 可以大但不可以小。因为如果解空间偏大（只要不是无限大）无非就是多做几次运算，而如果解空间过小则可能<strong>错失正确解</strong>，导致结果错误。比如前面我提到的求 x 的平方根，我们当然可以将解空间定义的更小，比如定义为 <code>[1,x/2]</code>，这样可以减少运算的次数。但如果设置地太小，则可能会错过正确解。这是新手容易犯错的点之一。</p><p>有的同学可能会说我看不出来怎么办呀。我觉得如果你实在拿不准也完全没有关系，比如求 x 的平方根，就可以设置为 <code>[1,x]</code>，就让它多做几次运算嘛。我建议你<strong>给上下界设置一个宽泛的范围</strong>。等你对二分逐步了解之后可以<strong>卡地更死一点</strong>。</p><h3 id="序列有序" tabindex="-1">序列有序 <a class="header-anchor" href="#序列有序" aria-label="Permalink to &quot;序列有序&quot;">​</a></h3><p>我这里说的是序列，并不是数组，链表等。也就是说二分法通常要求的序列有序，不一定是数组，链表，也有可能是其他数据结构。另外有的<strong>序列有序</strong>题目直接讲出来了，会比较容易。而有些则隐藏在题目信息之中。乍一看，题目并没有<strong>有序</strong>关键字，而有序其实就隐藏在字里行间。比如题目给了数组 <code>nums</code>，并且没有限定 <code>nums</code> 有序，但限定了 <code>nums</code> 为非负。这样如果给 <code>nums</code> 做前缀和或者前缀或（位运算或），就可以得到一个有序的序列啦。</p><blockquote><p>更多技巧在四个应用部分展开哦。</p></blockquote><p>虽然二分法不意味着需要序列有序，但大多数二分题目都有<strong>有序</strong>这个显著特征。只不过：</p><ul><li>有的是题目直接限定了有序。这种题目通常难度不高，也容易让人想到用二分。</li><li>有的是需要你<strong>自己构造有序序列</strong>。这种类型的题目通常难度不低，需要大家有一定的观察能力。</li></ul><p>比如<a href="https://binarysearch.com/problems/Triple-Inversion" title="Triple Inversion" target="_blank" rel="noreferrer">Triple Inversion</a>。题目描述如下：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Given a list of integers nums, return the number of pairs i &lt; j such that nums[i] &gt; nums[j] * 3.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Constraints： n ≤ 100,000 where n is the length of nums</span></span>
<span class="line"><span>Example 1</span></span>
<span class="line"><span>Input：</span></span>
<span class="line"><span>nums = [7, 1, 2]</span></span>
<span class="line"><span>Output：</span></span>
<span class="line"><span>2</span></span>
<span class="line"><span>Explanation：</span></span>
<span class="line"><span>We have the pairs (7, 1) and (7, 2)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>这道题并没有限定数组 nums 是有序的，但是我们可以构造一个有序序列 d，进而在 d 上做二分。代码：</p><div class="language-py vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Solution</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> solve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, A):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ans </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> A:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bisect.bisect_right(d, a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ans </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(d) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            bisect.insort(d, a)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ans</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>如果暂时不理解代码也没关系，大家先留个印象，知道有这么一种类型题即可，大家可以看完本章的所有内容（上下两篇）之后再回头做这道题。</p><h3 id="极值" tabindex="-1">极值 <a class="header-anchor" href="#极值" aria-label="Permalink to &quot;极值&quot;">​</a></h3><p>类似我在<a href="./heap.html">堆专题</a> 提到的极值。只不过这里的极值是<strong>静态的</strong>，而不是动态的。这里的极值通常指的是<strong>求第 k 大（或者第 k 小）的数。</strong></p><p>堆的一种很重要的用法是求第 k 大的数，而二分法也可以求第 k 大的数，只不过<strong>二者的思路完全不同</strong>。使用堆求第 k 大的思路我已经在前面提到的堆专题里详细解释了。那么二分呢？这里我们通过一个例子来感受一下：这道题是 <a href="https://binarysearch.com/problems/Kth-Pair-Distance" title="Kth Pair Distance" target="_blank" rel="noreferrer">Kth Pair Distance</a>，题目描述如下：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Given a list of integers nums and an integer k, return the k-th (0-indexed) smallest abs(x - y) for every pair of elements (x, y) in nums. Note that (x, y) and (y, x) are considered the same pair.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Constraints:n ≤ 100,000 where n is the length of nums</span></span>
<span class="line"><span>Example 1</span></span>
<span class="line"><span>Input:</span></span>
<span class="line"><span>nums = [1, 5, 3, 2]</span></span>
<span class="line"><span>k = 3</span></span>
<span class="line"><span>Output:</span></span>
<span class="line"><span>2</span></span>
<span class="line"><span>Explanation:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Here are all the pair distances:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>abs(1 - 5) = 4</span></span>
<span class="line"><span>abs(1 - 3) = 2</span></span>
<span class="line"><span>abs(1 - 2) = 1</span></span>
<span class="line"><span>abs(5 - 3) = 2</span></span>
<span class="line"><span>abs(5 - 2) = 3</span></span>
<span class="line"><span>abs(3 - 2) = 1</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Sorted in ascending order we have [1, 1, 2, 2, 3, 4].</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>简单来说，题目就是给的一个数组 nums，让你求 nums 第 k 大的<strong>任意两个数的差的绝对值</strong>。当然，我们可以使用堆来做，只不过使用堆的时间复杂度会很高，导致无法通过所有的测试用例。这道题我们可以使用二分法来降维打击。</p><p>对于这道题来说，解空间就是从 0 到数组 nums 中最大最小值的差，用区间表示就是 <code>[0, max(nums) - min(nums)]</code>。明确了解空间之后，我们就需要对解空间进行二分。对于这道题来说，可以选当前解空间的中间值 mid ，然后计算小于等于这个中间值的<strong>任意两个数的差的绝对值</strong>有几个，我们不妨令这个数字为 x。</p><ul><li>如果 x 大于 k，那么解空间中大于等于 mid 的数都不可能是答案，可以将其舍弃。</li><li>如果 x 小于 k，那么解空间中小于等于 mid 的数都不可能是答案，可以将其舍弃。</li><li>如果 x 等于 k，那么 mid 就是答案。</li></ul><p>基于此，我们可使用二分来解决。这种题型，我总结为<strong>计数二分</strong>。我会在后面的四大应用部分重点讲解。</p><p>代码：</p><div class="language-py vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Solution</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> solve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, A, k):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        A.sort()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> count_not_greater</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(diff):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ans </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(A)):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> A[j] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> A[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> diff:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                ans </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ans</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        l, r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, A[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> A[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> l </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            mid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (l </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count_not_greater(mid) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> k:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                l </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> l</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>如果暂时不理解代码也没关系，大家先留个印象，知道有这么一种类型题即可，大家可以看完本章的所有内容（上下两篇）之后再回头做这道题。</p><h2 id="一个中心" tabindex="-1">一个中心 <a class="header-anchor" href="#一个中心" aria-label="Permalink to &quot;一个中心&quot;">​</a></h2><p>二分法的一个中心大家一定牢牢记住。其他（比如序列有序，左右双指针）都是二分法的手和脚，都是表象，并不是本质，而<strong>折半才是二分法的灵魂</strong>。</p><p>前面已经给大家明确了解空间的概念。而这里的折半其实就是解空间的折半。</p><p>比如刚开始解空间是 <code>[1, n]</code>（n 为一个大于 n 的整数）。通过<strong>某种方式</strong>，我们确定 <code>[1, m]</code> 区间都<strong>不可能是答案</strong>。那么解空间就变成了 <code>(m,n]</code>，持续此过程知道解空间变成平凡（直接可解）。</p><blockquote><p>注意区间 <code>(m,n]</code> 左侧是开放的，表示 m 不可能取到。</p></blockquote><p>显然折半的难点是<strong>根据什么条件舍弃哪一步部分</strong>。这里有两个关键字:</p><ol><li>什么条件</li><li>舍弃哪部分</li></ol><p>几乎所有的二分的难点都在这两个点上。如果明确了这两点，几乎所有的二分问题都可以迎刃而解。幸运的是，关于这两个问题的答案通常都是有限的，题目考察的往往就是那几种。这其实就是所谓的做题套路。关于这些套路，我会在之后的四个应用部分给大家做详细介绍。</p><h2 id="二分法上篇小结" tabindex="-1">二分法上篇小结 <a class="header-anchor" href="#二分法上篇小结" aria-label="Permalink to &quot;二分法上篇小结&quot;">​</a></h2><p>上篇主要就是带大家了解几个概念，这些概念对做题极为重要，请务必掌握。接下来讲解了二分法的中心 - 折半，这个中心需要大家做任何二分都要放到脑子中。</p><p>如果让我用一句话总结二分法，我会说<strong>二分法是一种让未知世界无机可乘的算法</strong>。即二分法无论如何我们都可以舍弃一半解，也就是无论如何都可以将解空间砍半。难点就是上面提到的两点：<strong>什么条件</strong> 和 <strong>舍弃哪部分</strong>。这是二分法核心要解决的问题。</p><p><a href="./binary-search-2.html">二分专题（下篇）</a></p>`,37);function C(D,w,B,S,q,P){return e(),i("div",null,[t,s("p",null,[a("解空间指的是"),r,a("。比如一个题目所有解的可能是 "),h,a("，但具体在某一种情况只能是其中某一个数（即可能是 "),o,a(" 中的"),k,a("）。那么这里的解空间就是 "),d,a(" 构成的集合，在某一个具体的情况下可能是其中任意一个值，"),c,a("。如果线性枚举所有的可能，就枚举这部分来说时间复杂度就是 "),s("mjx-container",g,[(e(),i("svg",m,b)),E]),a("。")]),y,s("p",null,[a("比如让你求一个数 "),T,a(" 的平方根，答案误差在 "),s("mjx-container",_,[(e(),i("svg",Q,x)),f]),a(" 次方都认为正确。这里容易知道其解空间大小可定义为 "),A,a("（当然可以定义地更精确，之后我们再讨论这个问题），其中解空间应该包括所有区间的实数，不仅仅是整数而已。这个时候解题思路和代码都没有太大变化，唯二需要变化的是：")]),v])}const H=l(p,[["render",C]]);export{M as __pageData,H as default};
