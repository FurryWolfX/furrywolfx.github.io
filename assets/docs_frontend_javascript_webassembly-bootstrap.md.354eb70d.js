import{_ as s,o as a,c as n,V as l}from"./chunks/framework.4acca30d.js";const p="/assets/b4b81f82-165a-6543-be8f-64f510b8b22e.f119c7cc.jpg",e="/assets/90593041-0cb5-349e-e148-f772ed0dadd1.25382862.jpg",o="/assets/8408d849-b57b-0cf9-e801-5c0baa3da06c.36a1a6e8.jpg",t="/assets/972ac675-c2de-ee3c-2293-72d006c73cfe.138e09d4.jpg",u=JSON.parse('{"title":"WebAssembly 起步！","description":"","frontmatter":{"title":"WebAssembly 起步！","catalog":true,"date":"2018-01-31T16:50:24.000Z","subtitle":null,"header-img":null,"tags":["WebAssembly","JavaScript"]},"headers":[],"relativePath":"docs/frontend/javascript/webassembly-bootstrap.md","filePath":"docs/frontend/javascript/webassembly-bootstrap.md"}'),r={name:"docs/frontend/javascript/webassembly-bootstrap.md"},c=l('<h1 id="webassembly-起步" tabindex="-1">WebAssembly 起步！ <a class="header-anchor" href="#webassembly-起步" aria-label="Permalink to &quot;WebAssembly 起步！&quot;">​</a></h1><h2 id="了解-webassembly-原理" tabindex="-1">了解 WebAssembly 原理 <a class="header-anchor" href="#了解-webassembly-原理" aria-label="Permalink to &quot;了解 WebAssembly 原理&quot;">​</a></h2><p>WebAssembly 是一种可以在浏览器上运行的二进制可执行格式文件。它将成为浏览器进化史上又一次革命。</p><p>自从浏览器问世以来，javascript 就成为浏览器上执行程序的唯一标准，越来越多的应用程序通过 javascript 开发，并运行于浏览器上；而随着浏览器上 h5 程序功能的丰富，也对浏览器提出了更多的挑战。其中一条最为重要的就是性能问题。javascript 是一种弱类型，解释性的脚本语言。它天生运行速度慢，成为了很多 h5 应用的软肋。虽然 2008 年 google V8 引入了即时编译等技术使 js 的运行速度提升了一大截，但是一些大型应用程序，比如游戏，视频编辑，压缩，算法等依然不适合运行在浏览器上。</p><p>WebAssembly 的到来解决了这个问题，并给开发基于浏览器的应用程序提供了另外的编程语言选择。2017 年三大浏览器同时增加了 WebAssembly 支持，标志着 WebAssembly 已经达到生产实用标准。</p><h3 id="为什么-webassembly-比-javascript-快" tabindex="-1">为什么 WebAssembly 比 javascript 快 <a class="header-anchor" href="#为什么-webassembly-比-javascript-快" aria-label="Permalink to &quot;为什么 WebAssembly 比 javascript 快&quot;">​</a></h3><p>回答这个问题需要洞悉浏览器执行 javascript 代码的各个环节。 浏览器加载并执行 javascript 大概可分为如下几个环节： 下载，解析，执行和优化，垃圾回收。</p><h4 id="下载" tabindex="-1">下载 <a class="header-anchor" href="#下载" aria-label="Permalink to &quot;下载&quot;">​</a></h4><p>javascript 是以纯文本格式下载的。相比，webassembly 使用二进制格式存储，结构更精简，更小。</p><h4 id="解析" tabindex="-1">解析 <a class="header-anchor" href="#解析" aria-label="Permalink to &quot;解析&quot;">​</a></h4><p>javascript 下载后，需要 js 引擎经过 tokenize, parse 两个阶段转换成 AST(abstract syntax tree)，然后再转换为浏览器需要的中间字节码。由于 js 是比较高级的语言，解析 js 也相对要做更多的事情。webassembly 的格式类似于汇编语言，本来就是中间字节码，和需要运行的机器码更相近，需要简单的转换工作即可转化为 CPU 可以直接执行的机器码。</p><p>下图是一个真实运行的 webassembly（它是文本的，只是为了方便调试），可以看出它和汇编是很相似的，更易转化为机器码。</p><p><img src="'+p+`" alt=""></p><h4 id="执行和优化" tabindex="-1">执行和优化 <a class="header-anchor" href="#执行和优化" aria-label="Permalink to &quot;执行和优化&quot;">​</a></h4><p>在执行阶段，js 普遍采用解释执行策略，相当于每一次执行 javascript 指令都要通过 js 引擎中转给 cpu。现代的 js 引擎同时采用了即时编译的策略。这需要同时运行一个 profiler，关注每个函数的调用情况。当 profiler 发现一个函数调用的比较多的时候，会把这个函数抛给编译器，为它生成一个更快的编译版本。某些情况下，参数类型会发生变化。这时，需要删除之前的编译版本，对新参数类型编译新的版本。而 webassembly 由于类汇编的结构，只需简单的编译即可转换为可直接运行在 cpu 上的机器码，执行更快。</p><h4 id="垃圾回收" tabindex="-1">垃圾回收 <a class="header-anchor" href="#垃圾回收" aria-label="Permalink to &quot;垃圾回收&quot;">​</a></h4><p>javascript 运行期间需要同时间歇的运行一个垃圾回收器，扫描堆上的垃圾、释放内存。垃圾回收器的运行又和 js 引擎的执行是互斥的，导致 js 执行间歇性的被垃圾回收器打断。webassembly 不负责垃圾回收，只能编程语言自行解决。于是不同的编程语言又有所不同。C/C++ 是手动管理内存 (malloc/free, new/delete)，rust 则是基于生命周期的自动内存管理。所有这些内存管理方法都不需要间歇的全局暂停。因此性能更好。</p><p>从以上各个角度看 WebAssembly 确实比 javascript 性能高。事实上，目前阶段 WebAssembly 执行时间大概等于原生程序执行时间 X1.2。</p><h3 id="webassembly-的加载与执行" tabindex="-1">WebAssembly 的加载与执行 <a class="header-anchor" href="#webassembly-的加载与执行" aria-label="Permalink to &quot;WebAssembly 的加载与执行&quot;">​</a></h3><p>wasm 是 WebAssembly 格式的浏览器可执行文件。它是二进制的，但是它并不像桌面 win32 程序一样，可以随便使用系统资源，调用操作系统 api。事实上，所有与外界相关的操作都必须由 javascript 传入。比如：要申请一段内存，必须由 javascript 申请了并传给他。 浏览器上，javascript 做不到的，它也做不到；javascript 能做到的，它能做的更快。 这个就是它的价值。</p><p>目前必须要 js 启动 WebAssembly 的加载和实例化（后面可能会有单独的加载机制）。</p><p>如下函数，使用 fetchAPI 加载 wasm 文件，并实例化 wasm 模块。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fetchAndInstantiate</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">url</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">importObject</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">fetch</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">url</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">response</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">arrayBuffer</span><span style="color:#F07178;">())</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">bytes</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">WebAssembly</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">instantiate</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">importObject</span><span style="color:#F07178;">))</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">results</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">results</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">instance</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">fetchAndInstantiate</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">module.wasm</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> importObject)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">instance</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>importObject 即浏览器需要向 webassembly 注入的交互 api。</p><p>如下，是一个真实运行的 importObject 包括很多 js 函数。</p><p><img src="`+e+`" alt=""></p><p>注意 global.memory 就是 webassembly 程序执行用到的内存，是 js 申请的一个大的 ArrayBuffer。</p><h2 id="学会-webassembly-开发" tabindex="-1">学会 WebAssembly 开发 <a class="header-anchor" href="#学会-webassembly-开发" aria-label="Permalink to &quot;学会 WebAssembly 开发&quot;">​</a></h2><p>讲了这么多 WebAssembly 的优点，接下就讲下 WebAssembly 的开发。</p><p>开发 WebAssembly 并不意味着需要手写 WebAssembly 汇编程序。一个开源项目 emscripten 已经提供了 sdk 可以编译 C/C++，并输出 WebAssembly 的 wasm 文件。目前，rust 也已经支持编译到 wasm。未来所有支持编译到 LLVM 字节码的编程语言，理论上都可以输出 wasm。</p><h3 id="安装-emscripten" tabindex="-1">安装 emscripten <a class="header-anchor" href="#安装-emscripten" aria-label="Permalink to &quot;安装 emscripten&quot;">​</a></h3><p>下载 emscripten sdk 后，是个压缩文件，其实是 sdk 包管理器。 需要执行如下命令，完成 sdk 的安装。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">./emsdk</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">update</span></span>
<span class="line"><span style="color:#FFCB6B;">./emsdk</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">latest</span></span>
<span class="line"><span style="color:#FFCB6B;">./emsdk</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">activate</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">latest</span></span>
<span class="line"><span style="color:#82AAFF;">source</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">./emsdk_env.sh</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>现在已经有个可用的 emcc 编译器了，输入：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">emcc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--version</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>查看编译器版本。</p><p>emsdk 安装后， emscripten 文件内是按版本号安装的 sdk 内容，里面有很多 C/C++ 用例，可以自行研究下。</p><h3 id="简单-demo" tabindex="-1">简单 demo <a class="header-anchor" href="#简单-demo" aria-label="Permalink to &quot;简单 demo&quot;">​</a></h3><p>这个简单的 C 程序可以直接编译为 wasm。</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">stdio.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello, world!</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">./emcc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">hello_world.c</span></span>
<span class="line"><span style="color:#FFCB6B;">node</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">a.out.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>默认情况下，emcc 只输出了一个 js（asmjs）。asmjs 是 webassembly 的一个早期原型，可提供 webassembly 在旧版本浏览器上的兼容。按如下命令输出 webassembly 二进制 wasm。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">./emcc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">hello_world.c</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-s</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">WASM=</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-o</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">index.html</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这次编译输出了 index.html, index.js, index.wasm 三个文件。通过一个静态服务器打开 index.html，可以看到 console 里的输出。</p><p><img src="`+o+`" alt=""></p><p>这个 index.html 是一个调试页面。生产上加载 webassembly 一般都需要自己写 index.html，只保留 js 和 wasm 文件就够了。</p><p>以上的例子中，printf 的标准输出被定向到了浏览器的 console 里面。 系统 API 调用被换成了 js 实现。 事实上很多 libc 里面的函数被 emscripten 实现成了浏览器上的兼容方案，从而更好的和浏览器结合。</p><h3 id="环境" tabindex="-1">环境 <a class="header-anchor" href="#环境" aria-label="Permalink to &quot;环境&quot;">​</a></h3><p>所有编程语言都要和它的运行环境打交道，否则除了把 cpu 跑满，没什么实用价值。跑在浏览器上的 webassembly 则是通过和 js 相互调用发挥它的作用。</p><p>Emscripten sdk 提供了很多 API 与 js 运行环境／浏览器交互。定义在其中两个头文件中：</p><ul><li>emscripten.h： 中定义了一些基础功能相关 API，包括调用 js，文件读写，网络请求等，这些 API 在 node 中也可以用。</li><li>html5.h 中定义了浏览器中与 DOM 相关的各种操作，包括 DOM，事件，设备相关等。</li></ul><p>下面，抽出一些关键的 API 讲下 webassembly 是如何与浏览器协同工作的。</p><h4 id="调用-js" tabindex="-1">调用 js <a class="header-anchor" href="#调用-js" aria-label="Permalink to &quot;调用 js&quot;">​</a></h4><p>EM_ASM 宏，让 webassembly 可以直接调用 js。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">EM_ASM(alert(</span><span style="color:#FFCB6B;">&#39;hai&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">alert(</span><span style="color:#FFCB6B;">&#39;bai&#39;</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果需要从 js 获取执行结果，可以用 EM_ASM_INT， EM_ASM_DOUBLE 两个版本分别获取 int 和 double 类型的数值。</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">EM_ASM_INT</span><span style="color:#89DDFF;">({</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> $</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">42</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>如果需要传递字符串给 js，可以传递一个字符串起始的指针给 js。由于 js 可以访问整个 wasm 程序的内存区域，js 用这个指针就可以从内存读出字符串。Module 对象上的<code>UTF8ToString(ptr)</code>, <code>UTF16ToString(ptr)</code>, <code>UTF32ToString(ptr)</code>, <code>Pointer_stringify(ptr, length)</code>这几个函数可获得指针处的字符串。</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">char</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> sample </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">This is a string</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">EM_ASM_</span><span style="color:#89DDFF;">({</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">js got string:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Module</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">UTF8ToString</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">$</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> sample</span><span style="color:#89DDFF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="标准输入输出" tabindex="-1">标准输入输出 <a class="header-anchor" href="#标准输入输出" aria-label="Permalink to &quot;标准输入输出&quot;">​</a></h4><p>标准输出我们之前看过，printf 最终被转到 Module.print，默认是 console.log 实现。 标准错误输出最终会被转到 Module.printErr，默认是 console.error 实现。 对标准输入的读取在浏览器上变成了一个 prompt 框。体验不好，尽量不要读。</p><h4 id="显示" tabindex="-1">显示 <a class="header-anchor" href="#显示" aria-label="Permalink to &quot;显示&quot;">​</a></h4><p>Emscripten 支持两种 GUI 展示方法。</p><ul><li>DOM： wasm 是可以调用 js 的，而 js 又可以操作 DOM。因此，wasm 可以通过 js 操作 DOM，创建程序的 GUI。</li><li>Webgl Canvas: 除了 DOM，emscripten 还可以提供了 opengl es 的浏览器实现。通过操作一个 Webgl Canvas，把显示内容画在 Canvas 上。</li></ul><h4 id="事件循环" tabindex="-1">事件循环 <a class="header-anchor" href="#事件循环" aria-label="Permalink to &quot;事件循环&quot;">​</a></h4><p>C++ GUI 程序一般都有个事件循环，其实就是个死循环，反复获取并处理 GUI 层面上的各种事件。这样程序不会跑完 main 函数直接退出。webassembly 程序跑在浏览器上，而浏览器本来就是事件驱动，已经有了一个事件循环。假如不改动直接上浏览器，就会卡死浏览器的 GUI 进程。因此 webassembly 程序需要由浏览器控制事件循环。</p><p><code>emscripten_set_main_loop(em_callback_func func, int fps, int simulate_infinite_loop)</code>函数接受一个函数的指针后，浏览器会根据 fps 按时调用传入的函数。</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">stdio.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">emscripten.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> frame </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main_loop</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">frame: %d</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> frame</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  frame</span><span style="color:#89DDFF;">++;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">emscripten_set_main_loop</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">main_loop</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h4 id="存储" tabindex="-1">存储 <a class="header-anchor" href="#存储" aria-label="Permalink to &quot;存储&quot;">​</a></h4><p>浏览器隔离了程序直接操作存储的权限，因而 webapp 是安全的，但很多 C 代码都有同步操作文件的 API，如 open, write, close。为了兼容，emscripten 实现了一个内存文件系统，可以通过全局对象 FS 访问。</p><p>下图，是 FS 对象下的函数。</p><p><img src="`+t+`" alt=""></p><p>另外，emcc 还提供了 --preload-file 参数，在 webassembly 程序加载的过程中，预加载文件放到虚拟文件系统中。</p><p>wasm 中的文件虽然是内存的，但是支持通过 indexDB 持久化。 如下 js，mount 一个 indexdb 的文件夹到 /data 目录，然后 FS.syncfs 把 indexdb 中的文件同步到内存。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">FS</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mkdir</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/data</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">FS</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mount</span><span style="color:#A6ACCD;">(IDBFS</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/data</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">FS</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">syncfs</span><span style="color:#A6ACCD;">(</span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">err</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>接下来，所有，/data 目录下的读写，都在内存中的同步读写。当程序关闭的时候，需要调用<code>FS.syncfs(false, function(err){})</code>把内存中的文件反方向同步回 indexdb。</p><h4 id="库" tabindex="-1">库 <a class="header-anchor" href="#库" aria-label="Permalink to &quot;库&quot;">​</a></h4><p>emsdk 提供了一些常用的 C++ 库的 webassembly 兼容版本。用<code>emcc --show-ports</code>命令显示。如果要用 SDL2，需要给 emcc 加入选项<code>-s USE_SDL=2</code>，链接 SDL2 库。</p><p>目前，emcc 内置支持这些库。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">emcc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--show-ports</span></span>
<span class="line"><span style="color:#FFCB6B;">Available</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ports:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">zlib</span><span style="color:#A6ACCD;"> (USE_ZLIB=1</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">zlib</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">license</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">libpng</span><span style="color:#A6ACCD;"> (USE_LIBPNG=1</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">zlib</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">license</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">SDL2</span><span style="color:#A6ACCD;"> (USE_SDL=2</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">zlib</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">license</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">SDL2_image</span><span style="color:#A6ACCD;"> (USE_SDL_IMAGE=2</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">zlib</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">license</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">ogg</span><span style="color:#A6ACCD;"> (USE_OGG=1</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">zlib</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">license</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">vorbis</span><span style="color:#A6ACCD;"> (USE_VORBIS=1</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">zlib</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">license</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">bullet</span><span style="color:#A6ACCD;"> (USE_BULLET=1</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">zlib</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">license</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">freetype</span><span style="color:#A6ACCD;"> (USE_FREETYPE=1</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">freetype</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">license</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">SDL2_ttf</span><span style="color:#A6ACCD;"> (USE_SDL_TTF=2</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">zlib</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">license</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">SDL2_net</span><span style="color:#A6ACCD;"> (zlib </span><span style="color:#C3E88D;">license</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">Binaryen</span><span style="color:#A6ACCD;"> (Apache </span><span style="color:#F78C6C;">2.0</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">license</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">cocos2d</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>如果所需要的库没在列表里，需要先用 emsdk 编译所需要的库（可能涉及到库的改动）。再编译并链接，输出最终目标。emcc 不支持动态链接。</p><h2 id="webassembly-示例-c-c" tabindex="-1">WebAssembly 示例(C/C++) <a class="header-anchor" href="#webassembly-示例-c-c" aria-label="Permalink to &quot;WebAssembly 示例(C/C++)&quot;">​</a></h2><p>如果你的浏览器支持 WebAssembly，则可以直接运行下面代码：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">WebAssembly</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">compile</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Uint8Array</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#C3E88D;">  00 61 73 6d  01 00 00 00  01 0c 02 60  02 7f 7f 01</span></span>
<span class="line"><span style="color:#C3E88D;">  7f 60 01 7f  01 7f 03 03  02 00 01 07  10 02 03 61</span></span>
<span class="line"><span style="color:#C3E88D;">  64 64 00 00  06 73 71 75  61 72 65 00  01 0a 13 02</span></span>
<span class="line"><span style="color:#C3E88D;">  08 00 20 00  20 01 6a 0f  0b 08 00 20  00 20 00 6c</span></span>
<span class="line"><span style="color:#C3E88D;">  0f 0b</span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">trim</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">split</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">/[</span><span style="color:#C3E88D;">\\s\\r\\n</span><span style="color:#89DDFF;">]+/</span><span style="color:#F78C6C;">g</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">str</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">parseInt</span><span style="color:#A6ACCD;">(str</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">16</span><span style="color:#A6ACCD;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">  )</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">module</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">instance</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">WebAssembly</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Instance</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">module</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">add</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">square</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">instance</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">exports</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">2 + 4 =</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">add</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">4</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">3^2 =</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">square</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">3</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">(2 + 5)^2 =</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">square</span><span style="color:#F07178;">(</span><span style="color:#82AAFF;">add</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">2</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">5</span><span style="color:#F07178;">)))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h3 id="编译器-c-c" tabindex="-1">编译器（C/C++） <a class="header-anchor" href="#编译器-c-c" aria-label="Permalink to &quot;编译器（C/C++）&quot;">​</a></h3><blockquote><p>有一个在线 C++ 转 wasm 的工具： <a href="http://mbebenita.github.io/WasmExplorer/" target="_blank" rel="noreferrer">WasmExplorer</a></p></blockquote><p><a href="http://kripken.github.io/emscripten-site/" target="_blank" rel="noreferrer">Emscripten</a>，它基于 LLVM ，可以将 C/C++ 编译成 asm.js，使用 WASM 标志也可以直接生成 WebAssembly 二进制文件（后缀是 .wasm）。</p><p>注：emcc 在 1.37 以上版本才支持直接生成 wasm 文件。</p><p>当然还有其他语言的编译器，这里只说 C/C++</p><p>使用 <a href="http://kripken.github.io/emscripten-site/docs/getting_started/downloads.html#updating-the-emscripten-sdk" target="_blank" rel="noreferrer">SDK</a> 方式安装更方便</p><p>解压下载的 zip, 进入 SDK 的解压目录。逐步执行如下命令</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">## Fetch the latest registry of available tools.</span></span>
<span class="line"><span style="color:#FFCB6B;">./emsdk</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">update</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">## Download and install the latest SDK tools.</span></span>
<span class="line"><span style="color:#FFCB6B;">./emsdk</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">latest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">## Make the &quot;latest&quot; SDK &quot;active&quot; for the current user. (writes ~/.emscripten file)</span></span>
<span class="line"><span style="color:#FFCB6B;">./emsdk</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">activate</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">latest</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>如果 activate 无效，可以手动设置环境变量（如果已经装了 Java、Node、Python，可以省略这 3 个）：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">PATH</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">+=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">D:</span><span style="color:#A6ACCD;">\\t</span><span style="color:#C3E88D;">ools-dev</span><span style="color:#A6ACCD;">\\e</span><span style="color:#C3E88D;">msdk-portable-64bit</span><span style="color:#A6ACCD;">\\c</span><span style="color:#C3E88D;">lang</span><span style="color:#A6ACCD;">\\e</span><span style="color:#C3E88D;">1.37.28_64bit</span></span>
<span class="line"><span style="color:#FFCB6B;">PATH</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">+=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">D:</span><span style="color:#A6ACCD;">\\t</span><span style="color:#C3E88D;">ools-dev</span><span style="color:#A6ACCD;">\\e</span><span style="color:#C3E88D;">msdk-portable-64bit</span><span style="color:#A6ACCD;">\\n</span><span style="color:#C3E88D;">ode</span><span style="color:#A6ACCD;">\\4</span><span style="color:#C3E88D;">.1.1_64bit</span><span style="color:#A6ACCD;">\\b</span><span style="color:#C3E88D;">in</span></span>
<span class="line"><span style="color:#FFCB6B;">PATH</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">+=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">D:</span><span style="color:#A6ACCD;">\\t</span><span style="color:#C3E88D;">ools-dev</span><span style="color:#A6ACCD;">\\e</span><span style="color:#C3E88D;">msdk-portable-64bit</span><span style="color:#A6ACCD;">\\p</span><span style="color:#C3E88D;">ython</span><span style="color:#A6ACCD;">\\2</span><span style="color:#C3E88D;">.7.5.3_64bit</span></span>
<span class="line"><span style="color:#FFCB6B;">PATH</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">+=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">D:</span><span style="color:#A6ACCD;">\\t</span><span style="color:#C3E88D;">ools-dev</span><span style="color:#A6ACCD;">\\e</span><span style="color:#C3E88D;">msdk-portable-64bit</span><span style="color:#A6ACCD;">\\j</span><span style="color:#C3E88D;">ava</span><span style="color:#A6ACCD;">\\7</span><span style="color:#C3E88D;">.45_64bit</span><span style="color:#A6ACCD;">\\b</span><span style="color:#C3E88D;">in</span></span>
<span class="line"><span style="color:#FFCB6B;">PATH</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">+=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">D:</span><span style="color:#A6ACCD;">\\t</span><span style="color:#C3E88D;">ools-dev</span><span style="color:#A6ACCD;">\\e</span><span style="color:#C3E88D;">msdk-portable-64bit</span><span style="color:#A6ACCD;">\\e</span><span style="color:#C3E88D;">mscripten</span><span style="color:#A6ACCD;">\\1</span><span style="color:#C3E88D;">.37.28</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="python-版本不对" tabindex="-1">Python 版本不对？ <a class="header-anchor" href="#python-版本不对" aria-label="Permalink to &quot;Python 版本不对？&quot;">​</a></h3><p>Emscripten 需要 Py2，如果你装了 Py3，则需要同时安装 Py2。</p><p>Py2 和 Py3 在 Windows 下共存的方案，可以看这个：</p><p><a href="http://blog.csdn.net/louishao/article/details/57075531" target="_blank" rel="noreferrer">http://blog.csdn.net/louishao/article/details/57075531</a></p><h3 id="编写-c-代码" tabindex="-1">编写 C 代码 <a class="header-anchor" href="#编写-c-代码" aria-label="Permalink to &quot;编写 C 代码&quot;">​</a></h3><p>首先新建一个 C 语言文件，假设叫 math.c 吧，在里边实现 add 和 square 方法：</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// math.c</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">y</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> x </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> y</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">square</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> x </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> x</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>然后执行 <code>emcc math.c -Os -s WASM=1 -s SIDE_MODULE=1 -o math.wasm</code> 就可以生成 wasm 文件了。</p><h3 id="编写加载函数" tabindex="-1">编写加载函数 <a class="header-anchor" href="#编写加载函数" aria-label="Permalink to &quot;编写加载函数&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">loadWebAssembly</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">path</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">fetch</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">path</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 加载文件</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">res</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">arrayBuffer</span><span style="color:#F07178;">()) </span><span style="color:#676E95;font-style:italic;">// 转成 ArrayBuffer</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">WebAssembly</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">instantiate</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 编译 + 实例化</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">mod</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">mod</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">instance</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 提取生成都模块</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>代码其实很简单，使用了 Fetch API 来获取 wasm 文件，然后将其转换成 ArrayBuffer，然后使用 WebAssembly.instantiate 这个一步到位的方法来编译并初始化一个 WebAssembly 的实例。最后一步是从生成的模块中提取出真正的实例对象。</p><p>完成了上边的操作，就可以直接使用 loadWebAssembly 这个方法加载 wasm 文件了，它相当于是一个 wasm-loader ；返回值是一个 Promise，使用起来和普通的 js 函数没什么区别。从 instance.exports 中可以找到 wasm 文件输出的接口。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">loadWebAssembly</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">path/to/math.wasm</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">instance</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">add</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">square</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">instance</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">exports</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="更完整的加载函数" tabindex="-1">更完整的加载函数 <a class="header-anchor" href="#更完整的加载函数" aria-label="Permalink to &quot;更完整的加载函数&quot;">​</a></h3><p>如果你直接使用上边那个 loadWebAssembly 函数，有可能会执行失败，因为在 wasm 文件里，可能还会引入一些环境变量，在实例化的同时还需要初始化内存空间和变量映射表，也就是 WebAssembly.Memory 和 WebAssembly.Table。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#89DDFF;font-style:italic;">{</span><span style="color:#FFCB6B;font-style:italic;">String</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">path</span><span style="color:#676E95;font-style:italic;"> wasm 文件路径</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#89DDFF;font-style:italic;">{</span><span style="color:#FFCB6B;font-style:italic;">Object</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">imports</span><span style="color:#676E95;font-style:italic;"> 传递到 wasm 代码中的变量</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">loadWebAssembly</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">path</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">imports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{})</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">fetch</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">path</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">response</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">arrayBuffer</span><span style="color:#F07178;">())</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">buffer</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">WebAssembly</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">compile</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">buffer</span><span style="color:#F07178;">))</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">module</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">imports</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">env</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">imports</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">env</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 开辟内存空间</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">imports</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">memoryBase</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">imports</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">memoryBase</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">imports</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">memory</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">imports</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">memory</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">WebAssembly</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Memory</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> initial</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">256</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 创建变量映射表</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">imports</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tableBase</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">imports</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tableBase</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">imports</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">table</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 在 MVP 版本中 element 只能是 &quot;anyfunc&quot;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">imports</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">table</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">WebAssembly</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Table</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">          initial</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">          element</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">anyfunc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 创建 WebAssembly 实例</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">WebAssembly</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Instance</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">module,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">imports</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><p>这个 loadWebAssembly 函数还接受第二个参数，表示要传递给 wasm 的变量，在初始化 WebAssembly 实例的时候，可以把一些接口传递给 wasm 代码。</p><h3 id="调用-webassembly-导出的接口" tabindex="-1">调用 WebAssembly 导出的接口 <a class="header-anchor" href="#调用-webassembly-导出的接口" aria-label="Permalink to &quot;调用 WebAssembly 导出的接口&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">loadWebAssembly</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./math.wasm</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">instance</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">add</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">instance</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">exports</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">_add</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">square</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">instance</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">exports</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">_square</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">2 + 4 =</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">add</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">4</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">3^2 =</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">square</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">3</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">(2 + 5)^2 =</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">square</span><span style="color:#F07178;">(</span><span style="color:#82AAFF;">add</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">2</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">5</span><span style="color:#F07178;">)))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><blockquote><p>比较奇怪的一点是，用 C/C++ 导出的模块，属性名上默认都带了 <code>_</code> 前缀，asm.js 转成了 wasm 模块就不带。</p></blockquote><h3 id="其他教程" tabindex="-1">其他教程 <a class="header-anchor" href="#其他教程" aria-label="Permalink to &quot;其他教程&quot;">​</a></h3><p><a href="http://www.ruanyifeng.com/blog/2017/09/asmjs_emscripten.html" target="_blank" rel="noreferrer">http://www.ruanyifeng.com/blog/2017/09/asmjs_emscripten.html</a></p><p><a href="http://webassembly.org/docs/high-level-goals/" target="_blank" rel="noreferrer">http://webassembly.org/docs/high-level-goals/</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/WebAssembly" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/WebAssembly</a></p><h2 id="webassembly-示例-assemblyscript" tabindex="-1">WebAssembly 示例(AssemblyScript) <a class="header-anchor" href="#webassembly-示例-assemblyscript" aria-label="Permalink to &quot;WebAssembly 示例(AssemblyScript)&quot;">​</a></h2><p>之前介绍了 WebAssembly 可以用 C/C++ 和 Rust 来编写。但是如果你是熟悉 JS 的前端，不想换语言怎么办呢？</p><p>于是 <a href="https://github.com/AssemblyScript/assemblyscript/" target="_blank" rel="noreferrer">AssemblyScript</a> 诞生了</p><blockquote><p>A TypeScript to WebAssembly compiler. <a href="http://assemblyscript.org" target="_blank" rel="noreferrer">http://assemblyscript.org</a></p></blockquote><h3 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h3><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">clone</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://github.com/AssemblyScript/assemblyscript.git</span></span>
<span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">assemblyscript</span></span>
<span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span></span>
<span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">link</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">## npm link 命令可以将一个任意位置的 npm 包链接到全局执行环境，从而在任意位置使用命令行都可以直接运行该 npm 包。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="编译器的使用" tabindex="-1">编译器的使用 <a class="header-anchor" href="#编译器的使用" aria-label="Permalink to &quot;编译器的使用&quot;">​</a></h3><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">asc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">yourModule.ts</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-b</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">yourModule.wasm</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,126),y=[c];function i(F,D,C,A,b,m){return a(),n("div",null,y)}const h=s(r,[["render",i]]);export{u as __pageData,h as default};
