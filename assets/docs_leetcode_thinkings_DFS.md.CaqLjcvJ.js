import{_ as s,c as a,o as i,a4 as n}from"./chunks/framework.CWaimgAe.js";const b=JSON.parse('{"title":"算法专题：DFS","description":"","frontmatter":{"title":"算法专题：DFS","date":"2024-05-12T00:00:00.000Z","tags":["LeetCode"]},"headers":[],"relativePath":"docs/leetcode/thinkings/DFS.md","filePath":"docs/leetcode/thinkings/DFS.md"}'),e={name:"docs/leetcode/thinkings/DFS.md"},t=n(`<h1 id="深度优先遍历" tabindex="-1">深度优先遍历 <a class="header-anchor" href="#深度优先遍历" aria-label="Permalink to &quot;深度优先遍历&quot;">​</a></h1><h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h2><p>深度优先搜索算法（英语：Depth-First-Search，DFS）是一种用于遍历或搜索树或图的算法。沿着树的深度遍历树的节点，尽可能深的搜索树的分支。当节点 v 的所在边都己被探寻过，搜索将回溯到发现节点 v 的那条边的起始节点。这一过程一直进行到已发现从源节点可达的所有节点为止。如果还存在未被发现的节点，则选择其中一个作为源节点并重复以上过程，整个进程反复进行直到所有节点都被访问为止。属于盲目搜索。</p><p>深度优先搜索是图论中的经典算法，利用深度优先搜索算法可以产生目标图的相应拓扑排序表，利用拓扑排序表可以方便的解决很多相关的图论问题，如最大路径问题等等。</p><p>因发明「深度优先搜索算法」，约翰 · 霍普克洛夫特与罗伯特 · 塔扬在 1986 年共同获得计算机领域的最高奖：图灵奖。</p><p>截止目前（2020-02-21），深度优先遍历在 LeetCode 中的题目是 129 道。在 LeetCode 中的题型绝对是超级大户了。而对于树的题目，我们基本上都可以使用 DFS 来解决，甚至我们可以基于 DFS 来做广度优先遍历。并不一定说 DFS 不可以做 BFS（广度优先遍历）的事情。而且由于 DFS 通常我们可以基于递归去做，因此算法会更简洁。 在对性能有很高邀请的场合，我建议你使用迭代，否则尽量使用递归，不仅写起来简单快速，还不容易出错。</p><p>另外深度优先遍历可以结合回溯专题来联系，建议将这两个专题放到一起来学习。</p><p>DFS 的概念来自于图论，但是搜索中 DFS 和图论中 DFS 还是有一些区别，搜索中 DFS 一般指的是通过递归函数实现暴力枚举。</p><h2 id="算法流程" tabindex="-1">算法流程 <a class="header-anchor" href="#算法流程" aria-label="Permalink to &quot;算法流程&quot;">​</a></h2><ol><li>首先将根节点放入<strong>stack</strong>中。</li><li>从<em>stack</em>中取出第一个节点，并检验它是否为目标。如果找到目标，则结束搜寻并回传结果。否则将它某一个尚未检验过的直接子节点加入<strong>stack</strong>中。</li><li>重复步骤 2。</li><li>如果不存在未检测过的直接子节点。将上一级节点加入<strong>stack</strong>中。 重复步骤 2。</li><li>重复步骤 4。</li><li>若<strong>stack</strong>为空，表示整张图都检查过了——亦即图中没有欲搜寻的目标。结束搜寻并回传“找不到目标”。</li></ol><blockquote><p>这里的 stack 可以理解为自实现的栈，也可以理解为调用栈</p></blockquote><h2 id="算法模板" tabindex="-1">算法模板 <a class="header-anchor" href="#算法模板" aria-label="Permalink to &quot;算法模板&quot;">​</a></h2><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> visited</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> dfs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (满足特定条件）{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// 返回结果 or 退出搜索空间</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	visited[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 将当前状态标为已搜索</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (根据i能到达的下个状态j) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (!</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">visited</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">j</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 如果状态j没有被搜索过</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">			dfs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(j)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="题目推荐" tabindex="-1">题目推荐 <a class="header-anchor" href="#题目推荐" aria-label="Permalink to &quot;题目推荐&quot;">​</a></h2><p>这是我近期总结的几个 DFS 题目，后续会持续更新～</p><ul><li><a href="./../0200.number-of-islands.html">200. 岛屿数量</a> 中等</li><li><a href="https://leetcode-cn.com/problems/max-area-of-island/solution/mo-ban-ti-dao-yu-dfspython3-by-fe-lucifer/" target="_blank" rel="noreferrer">695. 岛屿的最大面积</a> 中等</li><li><a href="https://leetcode-cn.com/problems/distribute-coins-in-binary-tree/solution/tu-jie-dfspython3-by-fe-lucifer/" target="_blank" rel="noreferrer">979. 在二叉树中分配硬币</a> 中等</li></ul>`,16),l=[t];function p(r,h,k,o,d,c){return i(),a("div",null,l)}const g=s(e,[["render",p]]);export{b as __pageData,g as default};
