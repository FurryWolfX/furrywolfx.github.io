(window.webpackJsonp=window.webpackJsonp||[]).push([[189],{441:function(s,t,a){"use strict";a.r(t);var e=a(5),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"高频词汇的介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#高频词汇的介绍"}},[s._v("#")]),s._v(" 高频词汇的介绍")]),s._v(" "),a("p",[s._v("git 操作博大精深，细节很多，对于日常开发的我们而言，熟识几条常用的操作便可解决日常问题。对于初学者而言了解 git 基本词汇的含义和 git 的工作原理还是很有必要的，这样对解决 git 操作中的“bug”也非常有帮助。")]),s._v(" "),a("ul",[a("li",[s._v("remote：指存放在远程的一个计算机，在一般指 GitHub 服务器。")]),s._v(" "),a("li",[s._v("clone：指克隆，将 github 上的项目克隆（也可以说是复制）到自己的电脑上。")]),s._v(" "),a("li",[s._v("origin：指远程的代码仓库（自己的仓库），即源文件。")]),s._v(" "),a("li",[s._v("upstream：指上游，fork 别人项目的地址，别人的项目就是你的上游，即上一层源文件。")]),s._v(" "),a("li",[s._v("master：指主分支。")]),s._v(" "),a("li",[s._v("pull：指拉代码，把你 Github 上的远程仓库拉到本地计算机上。")]),s._v(" "),a("li",[s._v("push：指提交代码，把你本机上的项目提交到 Github 上的远程仓库。")])]),s._v(" "),a("p",[a("strong",[s._v("特别注意：")]),s._v(" "),a("strong",[s._v("本地的 .git 文件是指本地仓库，.git 目录下存放着所有文件的版本和关联信息，该目录在默认条件下是隐藏的。")])]),s._v(" "),a("hr"),s._v(" "),a("h1",{attrs:{id:"git-常用指令的用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-常用指令的用法"}},[s._v("#")]),s._v(" git 常用指令的用法")]),s._v(" "),a("p",[a("strong",[s._v("1. 源文件：")])]),s._v(" "),a("ul",[a("li",[s._v("git remote -v ：指查看远程关联的仓库，包括源文件和上一层源文件。")]),s._v(" "),a("li",[s._v("git remote add origin + 网址：指添加一个源文件。")]),s._v(" "),a("li",[s._v("git remote add upstream + 网址：指添加一个上一层源文件，即 fork 项目的源文件。")]),s._v(" "),a("li",[s._v("git remote remove origin/upstream + 网址：指删除一个源文件或上一层源文件。")])]),s._v(" "),a("p",[a("strong",[s._v("2. 初始化：")])]),s._v(" "),a("ul",[a("li",[s._v("git clone + 网址：指把网址中对应的项目克隆到自己本机上。")]),s._v(" "),a("li",[s._v("git init：指初始化。git 文件，里面没有链接信息，初始化后要重新建立与远程仓库的关联。")]),s._v(" "),a("li",[s._v("git pull upstream master：指把获得原项目更新。")])]),s._v(" "),a("p",[a("strong",[s._v("3. 提交：")])]),s._v(" "),a("ul",[a("li",[s._v("git add + 文件名：指把修改的某个文件添加到暂存区（指。git 仓库）；")]),s._v(" "),a("li",[s._v("git add . : 指把所有的修改文件添加到暂存区；")]),s._v(" "),a("li",[s._v('git commit -m "认真写为什么要做这次提交"：便于日后查阅和他人理解；')]),s._v(" "),a("li",[s._v("git push -u origin master: 指把暂存区的文件提交到 github 中。")]),s._v(" "),a("li",[s._v("git log：指查看提交的历史记录。")]),s._v(" "),a("li",[s._v("dir：查看该文件的子目录。")])]),s._v(" "),a("p",[a("strong",[s._v("4. 分支：")])]),s._v(" "),a("ul",[a("li",[s._v("git status：查看所有情况；")]),s._v(" "),a("li",[s._v("git branch：指查看分支信息；")]),s._v(" "),a("li",[s._v("git branch + 分支名：指创建新的分支；")]),s._v(" "),a("li",[s._v("git checkout + 分支名：指切换分支。")])]),s._v(" "),a("p",[s._v("看到这里大家是不是已经有点晕呢")]),s._v(" "),a("p",[s._v("下面用一张图对 git 的常用命令总结一下：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://imgs-1251264059.coscd.myqcloud.com/3c17db4a-6725-6edf-282b-b0344924a3d9.jpg",alt:"常用命令"}})]),s._v(" "),a("hr"),s._v(" "),a("h1",{attrs:{id:"git-五种状态间的顺序操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-五种状态间的顺序操作"}},[s._v("#")]),s._v(" Git 五种状态间的顺序操作")]),s._v(" "),a("h2",{attrs:{id:"四个区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四个区"}},[s._v("#")]),s._v(" 四个区")]),s._v(" "),a("p",[s._v("工作区 (Working Area)\n暂存区 (Stage)\n本地仓库 (Local Repository)\n远程仓库 (Remote Repository)")]),s._v(" "),a("h2",{attrs:{id:"五种状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五种状态"}},[s._v("#")]),s._v(" 五种状态")]),s._v(" "),a("p",[s._v("未修改 (Origin)\n已修改 (Modified)& 未追踪 (Untracked)\n已暂存 (Staged)\n已提交 (Committed)\n已推送 (Pushed)")]),s._v(" "),a("h2",{attrs:{id:"顺序操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#顺序操作"}},[s._v("#")]),s._v(" 顺序操作")]),s._v(" "),a("p",[s._v("第零步：工作区与仓库保持一致\n第一步：文件增删改，变为已修改状态\n第二步：git add ，变为已暂存状态")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" --all "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 当前项目下的所有更改")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 当前目录下的所有更改")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" xx/xx.py xx/xx2.py  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 添加某几个文件")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("第三步：git commit，变为已提交状态")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" commit -m"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"《这里写 commit 的描述》"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("第四步："),a("code",[s._v("git push")]),s._v("，变为已推送状态")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" push -u origin master "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 第一次需要关联上")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" push "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 之后再推送就不用指明应该推送的远程分支了")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" branch "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 可以查看本地仓库的分支")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" branch -a "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 可以查看本地仓库和本地远程仓库（远程仓库的本地镜像) 的所有分支")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://imgs-1251264059.coscd.myqcloud.com/d5a50c18-c289-1e39-61d9-fc98e2c9064f.jpg",alt:"title"}})]),s._v(" "),a("h1",{attrs:{id:"git-五种状态间的撤销操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-五种状态间的撤销操作"}},[s._v("#")]),s._v(" Git 五种状态间的撤销操作")]),s._v(" "),a("h2",{attrs:{id:"已修改-但未暂存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#已修改-但未暂存"}},[s._v("#")]),s._v(" 已修改，但未暂存")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("diff")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 列出所有的修改")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("diff")]),s._v(" xx/xx.py xx/xx2.py "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 列出某（几) 个文件的修改")]),s._v("\n\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" checkout "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 撤销项目下所有的修改")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" checkout "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 撤销当前文件夹下所有的修改")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" checkout xx/xx.py xx/xx2.py "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 撤销某几个文件的修改")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" clean -f "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# untracked 状态，撤销新增的文件")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" clean -df "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# untracked 状态，撤销新增的文件和文件夹")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Untracked files:")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#  (use "git add <file>..." to include in what will be committed)')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#\txxx.py")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("h2",{attrs:{id:"已暂存-未提交"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#已暂存-未提交"}},[s._v("#")]),s._v(" 已暂存，未提交")]),s._v(" "),a("p",[s._v("这个时候已经执行过"),a("code",[s._v("git add")]),s._v("，但未执行"),a("code",[s._v("git commit")]),s._v("，但是用"),a("code",[s._v("git diff")]),s._v("已经看不到任何修改。")]),s._v(" "),a("p",[s._v("因为"),a("code",[s._v("git diff")]),s._v("检查的是工作区与暂存区之间的差异。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("diff")]),s._v(" --cached "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 这个命令显示暂存区和本地仓库的差异")]),s._v("\n\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" reset "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 暂存区的修改恢复到工作区")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" reset --soft "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 与 git reset 等价，回到已修改状态，修改的内容仍然在工作区中")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" reset --hard "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 回到未修改状态，清空暂存区和工作区")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[a("code",[s._v("git reset --hard")]),s._v(" 操作等价于 "),a("code",[s._v("git reset")]),s._v(" 和 "),a("code",[s._v("git checkout")]),s._v(" 2 步操作")]),s._v(" "),a("h2",{attrs:{id:"已提交-未推送"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#已提交-未推送"}},[s._v("#")]),s._v(" 已提交，未推送")]),s._v(" "),a("p",[s._v("执行完 commit 之后，会在仓库中生成一个版本号 (hash 值)，标志这次提交。之后任何时候，都可以借助这个 hash 值回退到这次提交。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("diff")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("branch-name"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("1")]),s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("branch-name"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("2")]),s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 比较 2 个分支之间的差异")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("diff")]),s._v(" master origin/master "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看本地仓库与本地远程仓库的差异")]),s._v("\n\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" reset --hard origin/master "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 回退与本地远程仓库一致")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" reset --hard HEAD^ "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 回退到本地仓库上一个版本")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" reset --hard "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("hash code"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 回退到任意版本")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" reset --soft/git reset "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 回退且回到已修改状态，修改仍保留在工作区中。")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("blockquote",[a("p",[s._v("慎用，一般情况下，本地分支比远程要新，所以可以直接推送到远程，但有时推送到远程后发现有问题，进行了版本回退，旧版本或者分叉版本推送到远程，需要添加 -f 参数，表示强制覆盖。")])]),s._v(" "),a("h1",{attrs:{id:"git-中的那些强制-危险-操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-中的那些强制-危险-操作"}},[s._v("#")]),s._v(" Git 中的那些强制（危险）操作")]),s._v(" "),a("p",[s._v("这些是版本管理的禁术，切勿滥用！")]),s._v(" "),a("h2",{attrs:{id:"放弃本地所有修改-强制更新"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#放弃本地所有修改-强制更新"}},[s._v("#")]),s._v(" 放弃本地所有修改，强制更新")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" fetch --all\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" reset --hard origin/master\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[a("code",[s._v("git fetch")]),s._v(" 只是下载远程的库的内容，不做任何的合并")]),s._v(" "),a("p",[a("code",[s._v("git reset")]),s._v(" 把 HEAD 指向刚刚下载的最新的版本")]),s._v(" "),a("h2",{attrs:{id:"本地仓库覆盖远程的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#本地仓库覆盖远程的方法"}},[s._v("#")]),s._v(" 本地仓库覆盖远程的方法")]),s._v(" "),a("p",[s._v("首先，我远程仓库的 config 文件里设置过如下内容（默认新建的 git 仓库是不允许被修改的，所以这里放开修改权限）：")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("receive"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\ndenyCurrentBranch "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" ignore\ndenyNonFastforwards "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# change to false to enable overwriting")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("其次，执行如下命令，用本地文件直接覆盖远程仓库：")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" push origin branch-name --force\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h2",{attrs:{id:"删除-git-仓库中的文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除-git-仓库中的文件"}},[s._v("#")]),s._v(" 删除 git 仓库中的文件")]),s._v(" "),a("p",[a("strong",[s._v("（从所有历史中清除，不留痕迹）【不可恢复】")])]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 不可恢复的操作，慎用，一般用来减少仓库体积")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" filter-branch --index-filter "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'git rm --cached --ignore-unmatch <fileName>'")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" -rf .git/refs/original/*\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" reflog expire --expire"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("now --all\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("fsck")]),s._v(" --full --unreachable\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" repack -A -d\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" gc --aggressive --prune"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("now\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h1",{attrs:{id:"git-中启用大小写敏感"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-中启用大小写敏感"}},[s._v("#")]),s._v(" Git 中启用大小写敏感")]),s._v(" "),a("p",[s._v("首先切换到仓库目录")]),s._v(" "),a("p",[s._v("可以通过 "),a("code",[s._v("git config --get core.ignorecase")]),s._v(" 查看默认配置")]),s._v(" "),a("p",[s._v("通过 "),a("code",[s._v("git config core.ignorecase false")]),s._v(" 设置为区分大小写")]),s._v(" "),a("h1",{attrs:{id:"merge-与-rebase-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#merge-与-rebase-的区别"}},[s._v("#")]),s._v(" merge 与 rebase 的区别")]),s._v(" "),a("h2",{attrs:{id:"merge"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#merge"}},[s._v("#")]),s._v(" merge")]),s._v(" "),a("p",[s._v("现在假设我们有一个主分支 master 及一个开发分支 deve，仓库历史就像这样：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://imgs-1251264059.cos.ap-chengdu.myqcloud.com/385177fa-7378-43b0-ad46-ab72f1737a24.png",alt:"git-rebase-and-merge-0"}})]),s._v(" "),a("p",[s._v("初始仓库历史")]),s._v(" "),a("p",[s._v("现在如果在 master 分支上 "),a("code",[s._v("git merge deve")]),s._v("：Git 会自动根据两个分支的共同祖先即 "),a("code",[s._v("e381a81")]),s._v(" 这个 commit 和两个分支的最新提交即 "),a("code",[s._v("8ab7cff")]),s._v(" 和 "),a("code",[s._v("696398a")]),s._v(" 进行一个三方合并，然后将"),a("strong",[s._v("合并中修改的内容生成一个新的 commit")]),s._v("，即下图的 "),a("code",[s._v("78941cb")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://imgs-1251264059.cos.ap-chengdu.myqcloud.com/78e524cf-94c7-4298-84fe-1181314cb53c.png",alt:"git-rebase-and-merge-1.png"}})]),s._v(" "),a("p",[s._v("merge 合并图")]),s._v(" "),a("h2",{attrs:{id:"rebase"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rebase"}},[s._v("#")]),s._v(" rebase")]),s._v(" "),a("p",[s._v("rebase 是什么情况呢？还是一个初始的仓库历史图：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://imgs-1251264059.cos.ap-chengdu.myqcloud.com/ccef4285-3f26-4358-86e2-836a9291102a.png",alt:"git-rebase-and-merge-2.png"}})]),s._v(" "),a("p",[s._v("rebase 初始仓库历史")]),s._v(" "),a("p",[s._v("如果是在 master 分支上 "),a("code",[s._v("git rebase deve")]),s._v("：Git 会从两个分支的共同祖先 "),a("code",[s._v("3311ba0")]),s._v(" 开始提取 master 分支（当前所在分支）上的修改，即 "),a("code",[s._v("85841be")]),s._v("、"),a("code",[s._v("a016f64")]),s._v(" 与 "),a("code",[s._v("e53ec51")]),s._v("，再将 master 分支指向 deve 的最新提交（目标分支）即 "),a("code",[s._v("35b6708")]),s._v(" 处，然后将刚刚提取的修改依次应用到这个最新提交后面。操作会舍弃 master 分支上提取的 commit，同时"),a("strong",[s._v("不会像 merge 一样生成一个合并修改内容的 commit，相当于把 master 分支（当前所在分支）上的修改在 deve 分支（目标分支）上原样复制了一遍")]),s._v(",操作完成后的版本历史就像这样：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://imgs-1251264059.cos.ap-chengdu.myqcloud.com/c6376772-ee00-4666-a159-95362d3c9fcd.png",alt:"git-rebase-and-merge-3.png"}})]),s._v(" "),a("p",[s._v("rebase 合并图")]),s._v(" "),a("p",[s._v("可以看见 master 分支从 deve 分支最新提交 "),a("code",[s._v("35b6708")]),s._v(" 开始依次提交了自己的三个 commit（由于是提取修改后重新依次提交，故 commit 的 hash 码与上面的"),a("code",[s._v("85841be")]),s._v("、"),a("code",[s._v("a016f64")]),s._v("、"),a("code",[s._v("e53ec51")]),s._v(" 不同）")]),s._v(" "),a("h2",{attrs:{id:"rebase-i"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rebase-i"}},[s._v("#")]),s._v(" rebase -i")]),s._v(" "),a("p",[s._v("rebase 操作加上 "),a("code",[s._v("-i")]),s._v(" 选项可以更直观的看见被提取的 commit 信息。")]),s._v(" "),a("p",[s._v("仍然在 master 分支上 rebase deve 分支，不过这次要加上 "),a("code",[s._v("-i")]),s._v(" 选项，即 "),a("code",[s._v("git rebase -i deve")]),s._v("，然后我们可以得到这样一个文本信息框")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://imgs-1251264059.cos.ap-chengdu.myqcloud.com/be7dedae-79c0-4d83-bbb6-a3d8885bbeef.png",alt:"git-rebase-and-merge-4.png"}})]),s._v(" "),a("p",[s._v("rebase -i 信息")]),s._v(" "),a("ul",[a("li",[s._v("A 区域内的信息说明了这次 rebase 操作提取了哪些 commit 记录（"),a("code",[s._v("f9a7673")]),s._v(" 与 "),a("code",[s._v("edb2ba2")]),s._v("），会连接到目标分支的哪个 commit （"),a("code",[s._v("9c86a5c")]),s._v("）后面。可以根据 B 区域中的命令说明修改 "),a("code",[s._v("pick")]),s._v(" 为其他命令，对该次提取出来的 commit 做额外的操作")]),s._v(" "),a("li",[s._v("B 区域内说明了本次 rebase 操作可以选用的命令")]),s._v(" "),a("li",[s._v("通过 "),a("code",[s._v(":wq")]),s._v(" 保存退出后，就会按照刚刚在 A 区域内设定的命令处理 commit 并 rebase。")])]),s._v(" "),a("h2",{attrs:{id:"冲突处理策略的不同"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#冲突处理策略的不同"}},[s._v("#")]),s._v(" 冲突处理策略的不同")]),s._v(" "),a("ul",[a("li",[s._v("merge 遇见冲突后会直接停止，等待手动解决冲突并重新提交 commit 后，才能再次 merge")]),s._v(" "),a("li",[s._v("rebase 遇见冲突后会暂停当前操作，开发者可以选择手动解决冲突，然后 "),a("code",[s._v("git rebase --continue")]),s._v(" 继续，或者 "),a("code",[s._v("--skip")]),s._v(" 跳过（注意此操作中当前分支的修改会直接覆盖目标分支的冲突部分），亦或者 "),a("code",[s._v("--abort")]),s._v(" 直接停止该次 rebase 操作")])]),s._v(" "),a("h2",{attrs:{id:"merge-no-ff-与-merge-ff-only-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#merge-no-ff-与-merge-ff-only-的区别"}},[s._v("#")]),s._v(" "),a("code",[s._v("merge --no-ff")]),s._v(" 与 "),a("code",[s._v("merge --ff-only")]),s._v(" 的区别")]),s._v(" "),a("p",[s._v("上面对 merge 的讲述都是基于其默认操作即 "),a("code",[s._v("--no-ff")]),s._v("（"),a("code",[s._v("git merge xxx")]),s._v(" = "),a("code",[s._v("git merge --no-ff xxx")]),s._v("）的说明，但是 merge 还有一种常用的选项 "),a("code",[s._v("--ff-only")]),s._v("，那么这两种有什么区别呢？\n"),a("code",[s._v("--no-ff")]),s._v(" 是 merge 的默认操作，三方合并并提交修改；而 "),a("code",[s._v("--ff-only")]),s._v(" 会判断当前分支可否根据目标分支快速合并，就像下面这样")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://imgs-1251264059.cos.ap-chengdu.myqcloud.com/37ee681f-901c-4d4b-a5e2-defa916d4e9c.png",alt:"git-rebase-and-merge-5.png"}})]),s._v(" "),a("p",[s._v("快速合并")]),s._v(" "),a("p",[s._v("此时 deve 分支就可与 master 分支快速合并。")]),s._v(" "),a("p",[s._v("在 deve 分支上 "),a("code",[s._v("git merge --ff-only master")]),s._v("，便得到合并完成后的版本历史图")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://imgs-1251264059.cos.ap-chengdu.myqcloud.com/f6576c51-77d6-409c-bbda-766412cc9a37.png",alt:"git-rebase-and-merge-6.png"}})]),s._v(" "),a("p",[s._v("快速合并完成")]),s._v(" "),a("p",[s._v("可以发现 "),a("code",[s._v("--ff-only")]),s._v(" 生成的历史记录和 rebase 十分相似，但是本质上 "),a("code",[s._v("--ff-only")]),s._v(" 仍然是合并操作，但 rebase 并没有做合并，仅仅是提取修改到目标分支后面。")]),s._v(" "),a("h1",{attrs:{id:"使用-vscode-作为-diff-和-merge-的工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-vscode-作为-diff-和-merge-的工具"}},[s._v("#")]),s._v(" 使用 VSCode 作为 diff 和 merge 的工具")]),s._v(" "),a("div",{staticClass:"language-ini line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ini"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[s._v('[difftool "Visual Studio Code"]')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("\tcmd")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(' \\"/Applications/Visual Studio Code.app/Contents/MacOS/Electron\\" --wait --diff \\"$LOCAL\\" \\"$REMOTE\\"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token selector"}},[s._v("[diff]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("\ttool")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(" Visual Studio Code")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token selector"}},[s._v('[mergetool "Visual Studio Code"]')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("\tcmd")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(' \\"/Applications/Visual Studio Code.app/Contents/MacOS/Electron\\" --wait \\"$MERGED\\"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token selector"}},[s._v("[merge]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("\ttool")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(" Visual Studio Code")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h1",{attrs:{id:"git-仓库恢复命令-reset"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-仓库恢复命令-reset"}},[s._v("#")]),s._v(" git 仓库恢复命令 --reset")]),s._v(" "),a("p",[s._v("reset 命令：")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" reset --mixed\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("默认方式，不带任何参数的 git reset，即时这种方式，它回退到某个版本，只保留源码，回退 commit 和 index 信息")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" reset --soft\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("回退到某个版本，只回退了 commit 的信息，不会恢复到 index file 一级。如果还要提交，直接 commit 即可")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" reset --hard\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("强制彻底回退到某个版本，本地的源码也会变为上一个版本的内容 ，慎用，会彻底删除掉没有 commit 的文件，")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("fsck")]),s._v(" –lost-found 找回删除掉的文件。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])])}),[],!1,null,null,null);t.default=n.exports}}]);