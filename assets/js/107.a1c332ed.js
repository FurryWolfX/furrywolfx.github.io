(window.webpackJsonp=window.webpackJsonp||[]).push([[107],{359:function(t,a,s){"use strict";s.r(a);var n=s(5),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("blockquote",[s("p",[t._v("在使用 AngularJS 中的 scope 时，会有 6 个主要陷阱。如果你理解 AngularJS 背后的概念的话，这 6 个点其实非常的简单。但是在具体讲述这 6 个陷阱之前我们先要讲两个其它的概念。")])]),t._v(" "),s("h1",{attrs:{id:"概念-1-双向数据绑定"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概念-1-双向数据绑定"}},[t._v("#")]),t._v(" 概念 1： 双向数据绑定")]),t._v(" "),s("p",[t._v("双向数据绑定是 AngularJS 中非常重要的一个部分。一般的绑定对于我们来说已经非常熟悉了。即使你没有听说过双向数据绑定，你一定使用过它。")]),t._v(" "),s("p",[t._v("普通的绑定一般是用来数据数据的，它实际上是模板引擎的一个基本概念：")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("Hello "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("username"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("如果将变量 username 设置为 John Doe，上面的例子会被渲染为：")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("Hello John Doe"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("这是双向数据绑定的第一个方向。你可以在文档中查看 ng-bind 的详细内容。")]),t._v(" "),s("p",[t._v("在模板中这个功能已经足够用了，因为模板本来就是用来输出内容的。然而，在使用 HTML 构建用户界面时你依然可以使用双向数据绑定来处理用户输入。下面是一个例子：")]),t._v(" "),s("div",{staticClass:"language-html line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("input")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("ng-model")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("username"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("p")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("Hello {{username}}"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("只有当框架本身支持逆向绑定时，上面的例子才可以在不需要施加任何额外魔法的前提下正常运行（网络 onkeyup 或者 onchang 事件吧！）。")]),t._v(" "),s("p",[t._v("这是双向绑定的第二个方向。你可以在文档中查看 ng-model 的详细内容。")]),t._v(" "),s("p",[t._v("如果你将两个方向一起使用，你就已经使用了 AngularJS 中的双向数据绑定，它将能够整合从视图到模型之间的数据。")]),t._v(" "),s("p",[t._v("而绑定中数据的来源，我们叫做作用域（scope）。")]),t._v(" "),s("p",[t._v("和其他的数据绑定框架不同，AngularJS 并没有将对象包装在存取器中，正是因为如此，你不需要定义一个包含特定 getter 和 setter 的 对象。出去其中的一些功能（像是"),s("code",[t._v("$broadcast")]),t._v(","),s("code",[t._v("$apply")]),t._v(","),s("code",[t._v("$digest")]),t._v(","),s("code",[t._v("$emit")]),t._v("以及"),s("code",[t._v("$watch")]),t._v("）和引用（像 是"),s("code",[t._v("$parentScope")]),t._v(")，作用域基本上就是一个包含一些属性和值的普通对象。你可以像对待一个普通对象一样在 scope 中存取数据，同时这些发生在 作用域中的变化并不会被作用域本身所识别。任何变化都需要使用"),s("code",[t._v("$apply")]),t._v("方法来调用一个 digest 循环。然而，如果没有特别指明的话你并不需要去关注 这件事。")]),t._v(" "),s("p",[t._v("有时，每发生一次变化就去调用一个 digest 循环并不是很合适的做法因为这势必会影响应用的性能。比如一个聊天客户端，它每秒都会在 scope 中 添加一些特定的信息。为了让你的应用不至于变得慢吞吞，你最好限制 digest 循环的数量。简而言之，通过使用"),s("code",[t._v("$scope.$apply()")]),t._v("方法隐式调 用 AngularJS 中的 digest 循环将会运行模板中的所有表达式和监视器。")]),t._v(" "),s("h1",{attrs:{id:"概念-2-声明式-ui"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概念-2-声明式-ui"}},[t._v("#")]),t._v(" 概念 2： 声明式 UI")]),t._v(" "),s("p",[t._v("在 AngularJS 中，你需要遵循的一条规则就是“创建可充用的组件指令来扩展你的 HTML”，因为它可以保持你的代码的可重用性。")]),t._v(" "),s("p",[t._v("因为你很可能是一位 jQuery 开发者，你可能已经非常熟悉了“jQuery”式的开发方式，例如添加 CSS 样式的方式（addClass() 函数）和隐藏元素（hide() 函数）的方式。这样的方法被称为是命令式的：")]),t._v(" "),s("p",[t._v("你显式的告诉计算机你想要在特定的环境下运行代码，例如将代码包裹在一个 if 语句中。\nAngularJS 使用的方法是声明式的：")]),t._v(" "),s("p",[t._v("你需要在视图中声明如何显示一个特定的环境。")]),t._v(" "),s("p",[t._v("假设你现在有一个导航列表，其中包含一些项目。如果一个项目被选中了，这个项目应该添加一个叫做 active 的类。")]),t._v(" "),s("p",[t._v("在下面的例子中，第一个项目被标记为 active：")]),t._v(" "),s("div",{staticClass:"language-html line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("ul")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("navigation"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("li")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("item item1 active"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("Item 1"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("li")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("li")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("item item2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("Item 2"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("li")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("li")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("item item3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("Item 3"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("li")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("ul")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("ul")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("ul")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("jQuery 式的编程方式会首先移除所有的 active 类，并在其中一个项目上添加 active 类。但是究竟应该在哪一个项目上添加 active 类呢？你必须在 JavaScript 中提供一个额外的绑定来决定添加类的项目，可能是一个额外的类或者一些 data- 属性。")]),t._v(" "),s("p",[t._v("我们来看看 AngularJS 应该怎么做：")]),t._v(" "),s("div",{staticClass:"language-html line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("ul")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("navigation"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("li")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("ng-repeat")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("item in items"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("ng-class")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("{"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("'")]),t._v("active"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("'")]),t._v(": item.id == activeItem}"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    {{item.title}}\n  "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("li")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("ul")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("p",[t._v("为了代码能够正常运行，我们需要在作用域中添加以下内容：")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("$scope"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("activeItem "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"item1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n$scope"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("items "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    id"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"item1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    title"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Item 1"')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    id"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"item2"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    title"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Item 2"')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    id"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"item3"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    title"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Item 3"')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br")])]),s("p",[t._v("首先，这个例子使用了 ng-repeat 指令，这个指令将会迭代所有的 items 中的项目并且按照同样的顺序创建 HTML 元素。在这个例子中创建了三个"),s("code",[t._v("<li>")]),t._v("元素。")]),t._v(" "),s("p",[t._v("ng-class 指令声明式的描述了 active 类应该在什么时候被使用。这个类仅仅只会在 item.id==activeItem 结果为 true 时被添加。由于我们有双向数据绑定，因此当你将 $scope.activeItem 修改为 item2 时，标签也会自动发生改变。你不需要编写任何代码来修 改你的业务逻辑。在 AngularJS 中，行为应该在模板中被描述。")]),t._v(" "),s("p",[t._v("这意味着，你可以使用声明式的方式来轻松地创建标签栏，滑动按钮，自动滚屏区域，可拖拽窗口或者一个上下文菜单。")]),t._v(" "),s("p",[t._v("在讨论完了 AngularJS 中的双向数据绑定以及声明式 UI 之后，我们来看看在使用这些技术时会遇到的问题。")]),t._v(" "),s("h1",{attrs:{id:"陷阱-1-scope-digester-和表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#陷阱-1-scope-digester-和表达式"}},[t._v("#")]),t._v(" 陷阱 1： Scope digester 和表达式")]),t._v(" "),s("p",[t._v("当在视图或者监视器中使用表达式时，你应该总是记住每当 AngularJS 认为需要的时候，表达式总是会被调用。因此，可能并不能获得函数的性能，你甚至可能错过一些 change 事件。")]),t._v(" "),s("p",[t._v("这意味着：")]),t._v(" "),s("p",[t._v("带有一个 ng-repeat 的表达式将会分别调用每个项目。另外，AngularJS 将会使用 repeat 指令来决定数据变化。")]),t._v(" "),s("p",[t._v("一个表达式可能在一次 digest 循环中被多次估值（evaluation）。当你使用多个指令或者额外的作用于监视器时，这种情况会发生。")]),t._v(" "),s("p",[t._v("即使在作用域不会改变时依然会被估值。")]),t._v(" "),s("p",[t._v("如果表达式包含一个函数，在函数的返回值发生变化时，表达式不会被估值。但是在函数的定义发生变化时会被估值。")]),t._v(" "),s("p",[t._v("例如，我们拥有一个表达式： stat === getUserState()。有以下几种可能情况：")]),t._v(" "),s("p",[t._v("函数仅仅返回 scope.currentUserState: 此时我们可以抛弃函数，直接使用数据。这种表达式在未来会逐渐被优化。")]),t._v(" "),s("p",[t._v("这个函数会进行一些业务逻辑计算： 每次表达式被估值时，这些逻辑都会运行。更好的方法是在作用域中计算和编写当前用户状态。这种方法将能把逻辑和用户状态、视图进行解耦。一般来说数据就是作用域，作用域就是数据。")]),t._v(" "),s("p",[t._v("函数会从作用域之外的地方获取数据： 这种方法非常非常不好。作用域 /AngularJS 在发生变化时并不会得到通知。记住只有在 AngularJS 认为作用域发生了变化时，它才会调用一个 digest 循环，所有表达式才会受到影响。")]),t._v(" "),s("p",[t._v("有时，第二种、第三种情况会同时发生。")]),t._v(" "),s("p",[t._v("如果你使用了外部的数据（或者数据变化） – 例如，一个外部的 jQuery 插件会改变状态 – 你必须为作用域提供这些数据。给定一个指令，你可能会有一个能够访问当前作用域的回调函数。你可能会注意到作用域上的任何变化将不会更新任何的 UI，因为 AngularJS 不会注意到作用域发生了变化。")]),t._v(" "),s("p",[t._v("然而，你可以调用 AngularJS 中的"),s("code",[t._v("$scope.$apply()")]),t._v("函数，它将会调用所有 digest 循环，监视器和相关数据估值。")]),t._v(" "),s("p",[t._v("尽管如此，你还是应该尽量避免使用"),s("code",[t._v("$apply() 或者它的兄弟 $digest()")]),t._v("。在真实的外部事件（jQuery 回调，浏览器事件回调等等）之外，你可能会实现错误的代码架构。")]),t._v(" "),s("p",[t._v("注意到如果你在一个正在运行的 digest 循环中调用一个 digest/apply，你可能会遇到像是”Digest already in progress”这样的错误。这也是为什么应该在表达式中避免函数。")]),t._v(" "),s("p",[t._v("下面的代码是一种普遍的错误使用函数方法：")]),t._v(" "),s("div",{staticClass:"language-html line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("ul")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("li")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("ng-repeat")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("item in loadItems()"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("{{item.title}}"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("li")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("ul")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("这里出现的问题是调用了一个 loadItems() 函数。这个表达式将不会被正确的估值：这个指令本身会添加一些原数据到模型中以决定列表中的哪些 项目应该被添加，移除或者仅仅是移动。建议的做法是在 ng-repeat 中使用数组。告诉你自己：调用 loadItems 是命令式的，我们应该声明式的给 定数据。")]),t._v(" "),s("p",[t._v("最佳实践：")]),t._v(" "),s("p",[t._v("不要在表达式中使用函数。")]),t._v(" "),s("p",[t._v("不要使用表达式所在作用域以外的数据。")]),t._v(" "),s("p",[t._v("当应用外部数据变化时使用"),s("code",[t._v("$scope.$apply()")]),t._v("。")]),t._v(" "),s("p",[t._v("使用这些最佳实践将能够获取高效的代码，同时也不会错过事件。")]),t._v(" "),s("h1",{attrs:{id:"陷阱-2-引用一个-dom-元素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#陷阱-2-引用一个-dom-元素"}},[t._v("#")]),t._v(" 陷阱 2： 引用一个 DOM 元素")]),t._v(" "),s("p",[t._v("在指令中使用 DOM 元素是正确的。可以将它们存放在一个变量中。但是永远不要再作用域中存储 DOM 元素。")]),t._v(" "),s("p",[t._v("DOM 元素是巨大的 DOM 树的一部分，同时 DOM 树的本性是它知道自己的父元素，子元素和兄弟元素。如果你旨在作用域中存储了一个 DOM 元素，作用 域 digest 循环将会查找它本身以及它的父元素和父元素的父元素。这意味着 digest 将会检查整个 DOM 树来查找变化的部分。如果你觉得这还不够疯 狂，还有更恐怖的事情：因为每个 DOM 元素都会拥有额外的引用，digest 循环将会不止一次的遍历整个 DOM 树。")]),t._v(" "),s("p",[t._v("你并不像这样做，因为这很疯狂。")]),t._v(" "),s("p",[t._v("最佳实践：")]),t._v(" "),s("p",[t._v("不要在作用域中存储 DOM 元素，这回引起内存泄露。")]),t._v(" "),s("h1",{attrs:{id:"陷阱-3-在指令外面使用-dom-元素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#陷阱-3-在指令外面使用-dom-元素"}},[t._v("#")]),t._v(" 陷阱 3： 在指令外面使用 DOM 元素")]),t._v(" "),s("p",[t._v("不要在指令外面使用 DOM 元素。很多的服务都会轻易的产生一个 DOM 树，因为他们通常是单个的，全局的，以及无状态的实例，像是一个 REST API 的一个实例。")]),t._v(" "),s("p",[t._v("一个控制器中的 DOM 引用会纸箱一个错过的指令或者一些错过的行为。")]),t._v(" "),s("p",[t._v("真正的情况是，将一个控制器的 DOM 引用抽取到一个指令中是非常消耗资源的。但是如果你理解了这个问题以及它的影响，但是还是想要这么做，也没关 系。但是你很快就要去遇到的事实是控制器会绑定到一个特定的模板，同时由控制器引起的 DOM 变化将不会体现到 AngularJS 的作用域和视图中。")]),t._v(" "),s("p",[t._v("最佳实践：")]),t._v(" "),s("p",[t._v("不要在指令外部获取 DOM 元素因为指令可以将控制器、服务和 DOM 进行解耦。因此这样我们获得了更大灵活性，代码也更容易去测试和使用。")]),t._v(" "),s("h1",{attrs:{id:"陷阱-4-不使用内建方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#陷阱-4-不使用内建方法"}},[t._v("#")]),t._v(" 陷阱 4：不使用内建方法")]),t._v(" "),s("p",[t._v("我在前面提到了"),s("code",[t._v("$apply()")]),t._v("和"),s("code",[t._v("$digest()")]),t._v("的用法以及它们的影响。如果许多外部事件需要额外的"),s("code",[t._v("$apply()")]),t._v("调用，它将会引起很多麻 烦。因此我建议你深入阅读 AngularJS 文档，使用一些内建指令，比如使用"),s("code",[t._v("$timeout()")]),t._v("而不是使用 window.timeout()，前者会 隐式的调用"),s("code",[t._v("$rootScope.$apply()")]),t._v("。")]),t._v(" "),s("p",[t._v("你应该使用内建的"),s("code",[t._v("$http")]),t._v("方法而不是外部的 XHR 包装，它将返回一个"),s("code",[t._v("$q promise")]),t._v("。执行这个 promise 的任何回调函数都会调用"),s("code",[t._v("$rootScope.$apply()")]),t._v("。一些返回"),s("code",[t._v("$q promise")]),t._v("的模块将会隐式的调用"),s("code",[t._v("$rootScope.$apply()")]),t._v("。")]),t._v(" "),s("p",[t._v("最佳实践：")]),t._v(" "),s("p",[t._v("使用内建指令，因为它们能够让你写出简单友好的代码。")]),t._v(" "),s("h1",{attrs:{id:"陷阱-5-令人费解的-当前作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#陷阱-5-令人费解的-当前作用域"}},[t._v("#")]),t._v(" 陷阱 5： 令人费解的“当前作用域”")]),t._v(" "),s("p",[t._v("作用域的层级结构式非常聪明的做法，但是如果你理解的不是很深入，你将会很痛苦。在你的根作用域中你可以定义一些全局全局变量，它们将可以在所有的 自作用域中使用（除了隔离作用域） – 原型继承将会“找到”这些属性。在 DOM 中你也可以再一个普通的控制器中定义作用域来分享数据。")]),t._v(" "),s("p",[t._v("但是这里有一个阻塞：它只能在单方面上运行。但是这也不错，因为你不想将本地作用域中的数据暴露给其他作用域。")]),t._v(" "),s("div",{staticClass:"language-html line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("span")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("Outside Controller: Your name is: {{username}}"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("span")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("ng-controller")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("SignupController"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("span")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("Inside Controller: Your name is: {{username}}"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("span")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("fieldset")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("legend")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("User details"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("input")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("ng-model")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("username"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("fieldset")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("p",[t._v("尝试着改变 input 中的值，它可以正常运行但是只针对于内部的绑定。在控制器以外的绑定的值将不会变化。这是为什么？答案存在于“什么是我的当前作用域？”中。")]),t._v(" "),s("p",[t._v("例如，我们有两个作用域：总体的 rootScope 作用域和一个通过控制器（在这里是 SignupController）隐式创建的作用域。")]),t._v(" "),s("p",[t._v("当你在 input 字段中输入一个新值。当前的作用域会被赋上一个叫做 username 的新属性。因为准确来说 input 字段所在的控制器的作用域就 是当前作用域，这个属性也会被赋予这个作用域。就像 JavaScript 中的原型继承一样，这意味着这个属性在父作用域中不可用。因为我们知道这件事，所 有这很好理解。")]),t._v(" "),s("p",[t._v("你可能会想：我定义了一个初始值！你可以试试，但是它依然不管用，因为数据就像一个字符串一样依然只是停留在当前的作用域中。如果你 将"),s("code",[t._v("$rootScope.username")]),t._v("赋值为”，你最终将得到两个叫做 username 的属性，一个位于根作用域中，另一个存在于我们编写的控制器 中。")]),t._v(" "),s("p",[t._v("为了解决这个问题，你应该使用一个包装好的模型。换句话说，你应该在模型中使用'.'。\n对上面的例子进行一些修改：使用 user.name 而不是 username。")]),t._v(" "),s("div",{staticClass:"language-html line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("span")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("Outside Controller: Your name is: {{user.name}}"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("span")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("ng-controller")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("SignupController"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("span")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("Inside Controller: Your name is: {{user.name}}"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("span")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("fieldset")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("legend")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("User details"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("input")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("ng-model")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("user.name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("fieldset")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("p",[t._v("数据绑定现在被赋值给了 user.name。因为如果在当前作用域下找不到 user 对象，"),s("code",[t._v("$rootScope.user")]),t._v("会被隐式的读取，因此这个问题得以解决。除此之外它也能够帮助你将模型结构化。这确实是一个双赢的方法。\n但是你还是会发现你还是很容易犯错误，因为有许多内建的 AngularJS 指令 -- 或者是你自己创建的指令 -- 会创建自己的子作用域。比如说下面的这些指令：")]),t._v(" "),s("p",[t._v("ng-controller: 一个控制器有自己的作用域（因为它会在作用域中赋予行为）。")]),t._v(" "),s("p",[t._v("ng-form：将会使用一个特别的表单控制器，因此会产生一个新的作用域。注意："),s("code",[t._v("<form>")]),t._v("会创建一个 ng-form 的实例。")]),t._v(" "),s("p",[t._v("ng-repeat：每一个项目都有自己的子作用域（因为’item’是循环的内容）。")]),t._v(" "),s("p",[t._v("ng-switch：改变了 DOM 因此它拥有自己的作用域。")]),t._v(" "),s("p",[t._v("ng-view: 或多或少有些不相关，因为你总是会在 ng-view 下指明一个控制器。")]),t._v(" "),s("p",[t._v("最佳实践：")]),t._v(" "),s("p",[t._v("为了避免无结构化的内容和错误的作用域上下文以及使用指令隐式生成的作用域所产生的问题，不要在没有包装的对象上绑定一个未经绑定的数据。")]),t._v(" "),s("h1",{attrs:{id:"陷阱-6-没有正确使用-jquery"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#陷阱-6-没有正确使用-jquery"}},[t._v("#")]),t._v(" 陷阱 6： 没有正确使用 jQuery")]),t._v(" "),s("p",[t._v("AngularJS 实现了一个 jQuery 的子集 jQLite。它的基本操作和 jQuery 非常相似，然而，它并不是完整的 jQuery。如果你需 要使用完整的 jQuery 实现，你需要在 AngularJS 被载入之前加载 jQuery。只有这样，AngularJS 才会跳过 jQLite 而使用 jQuery。否则二者都会被载入进去，AngularJS 使用 jQLite，其他部分使用 jQuery。")]),t._v(" "),s("p",[t._v("最佳实践：")]),t._v(" "),s("p",[t._v("在 AngularJS 之前载入 jQuery。")]),t._v(" "),s("h1",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("p",[t._v("本文为 AngularJS 的初级开发者提供了 6 个常常会遇到的陷阱。如果你之前使用的是 jQuery， 那么你应该记住在 AngularJS 中应该使用声明式的方法而非命令式的方法。如果你尝试走 jQuery 的老路，那么你注定会在 AngularJS 中失败。")]),t._v(" "),s("p",[t._v("试着理解将作用域作为获取数据的场所，如果你试着从其他地方获取数据，最终将会出现问题。")]),t._v(" "),s("p",[t._v("使用上面提到的最佳实践，并确保你在编写 AngularJS 应用的过程中也探索了 API 文档。正确的使用其中的功能。")]),t._v(" "),s("p",[t._v("确保你合适的解耦你的应用：使用指令，控制器，服务和模板。显然你并不需要将代码分散到许多组件中，根据你的需要使用框架。")]),t._v(" "),s("p",[t._v("如果你都遵循了这些规则，你一定能够享受在 AngularJS 编程。")])])}),[],!1,null,null,null);a.default=e.exports}}]);