(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{304:function(e,t,o){"use strict";o.r(t);var n=o(5),i=Object(n.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("blockquote",[o("p",[e._v("浏览器中有很多和高度、宽度相关的属性，那么他们到底有什么不一样呢？他们是如何定义的呢？")])]),e._v(" "),o("h1",{attrs:{id:"element-clientwidth"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#element-clientwidth"}},[e._v("#")]),e._v(" Element.clientWidth")]),e._v(" "),o("p",[o("strong",[e._v("MDN 定义如下：")])]),e._v(" "),o("p",[e._v("The "),o("code",[e._v("Element.clientWidth")]),e._v(" property is zero for inline elements and elements with no CSS;\notherwise, it's the inner width of an element in pixels.\nIt includes padding but excludes borders, margins, and vertical scrollbars (if present).")]),e._v(" "),o("p",[o("code",[e._v("Element.clientWidth")]),e._v(" 属性表示元素的内部宽度，以像素计。该属性包括内边距，但不包括垂直滚动条（如果有）、边框和外边距。")]),e._v(" "),o("p",[e._v("This property will round the value to an integer. If you need a fractional value, use "),o("code",[e._v("element.getBoundingClientRect()")]),e._v(".")]),e._v(" "),o("p",[e._v("该属性值会被四舍五入为一个整数。如果你需要一个小数值，可使用 "),o("code",[e._v("element.getBoundingClientRect()")]),e._v("。")]),e._v(" "),o("p",[o("img",{attrs:{src:"https://imgs-1251264059.cos.ap-chengdu.myqcloud.com/5c662be2-22b7-4917-90df-e63df7efde56.png",alt:"UTOOLS1557742253183.png"}})]),e._v(" "),o("p",[o("strong",[e._v("解释：")])]),e._v(" "),o("p",[o("code",[e._v("Element.clientWidth")]),e._v(" 属性返回元素节点的 CSS 宽度，同样只对块级元素有效，也是只包括元素本身的宽度和 "),o("code",[e._v("padding")]),e._v("，如果有垂直滚动条，还要减去垂直滚动条的宽度。")]),e._v(" "),o("p",[o("code",[e._v("document.documentElement")]),e._v(" 的 "),o("code",[e._v("clientHeight")]),e._v(" 属性，返回当前视口的高度（即浏览器窗口的高度），等同于 "),o("code",[e._v("window.innerHeight")]),e._v(" 属性减去水平滚动条的高度（如果有的话）。\n"),o("code",[e._v("document.body")]),e._v(" 的高度则是网页的实际高度。\n一般来说，"),o("code",[e._v("document.body.clientHeight")]),e._v(" 大于 "),o("code",[e._v("document.documentElement.clientHeight")]),e._v("。")]),e._v(" "),o("h1",{attrs:{id:"element-offsetwidth"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#element-offsetwidth"}},[e._v("#")]),e._v(" Element.offsetWidth")]),e._v(" "),o("p",[o("strong",[e._v("MDN 定义如下：")])]),e._v(" "),o("p",[e._v("The "),o("code",[e._v("HTMLElement.offsetWidth")]),e._v(" read-only property returns the layout width of an element as an integer.")]),e._v(" "),o("p",[e._v("Typically, "),o("code",[e._v("offsetWidth")]),e._v(" is a measurement in pixels of the element's CSS width, including any "),o("code",[e._v("borders")]),e._v(", "),o("code",[e._v("padding")]),e._v(", and vertical scrollbars (if rendered). It does not include the width of pseudo-elements such as "),o("code",[e._v("::before")]),e._v(" or "),o("code",[e._v("::after")]),e._v(".")]),e._v(" "),o("p",[e._v("If the element is "),o("code",[e._v("hidden")]),e._v(" (for example, by setting "),o("code",[e._v("style.display")]),e._v(' on the element or one of its ancestors to "none"), then 0 is returned.')]),e._v(" "),o("p",[o("strong",[e._v("解释：")])]),e._v(" "),o("p",[o("code",[e._v("Element.offsetHeight")]),e._v(" 属性返回一个整数，表示元素的 CSS 垂直高度（单位像素），包括元素本身的高度、"),o("code",[e._v("padding")]),e._v(" 和 "),o("code",[e._v("border")]),e._v("，以及水平滚动条的高度（如果存在滚动条）。")]),e._v(" "),o("p",[o("code",[e._v("Element.offsetWidth")]),e._v(" 属性表示元素的 CSS 水平宽度（单位像素），其他都与 "),o("code",[e._v("Element.offsetHeight")]),e._v(" 一致。")]),e._v(" "),o("p",[e._v("这两个属性都是只读属性，只比 "),o("code",[e._v("Element.clientHeight")]),e._v(" 和 "),o("code",[e._v("Element.clientWidth")]),e._v(" 多了边框的高度或宽度。\n如果元素的 CSS 设为不可见（比如 "),o("code",[e._v("display: none;")]),e._v("），则返回 0。")]),e._v(" "),o("h1",{attrs:{id:"window-innerwidth"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#window-innerwidth"}},[e._v("#")]),e._v(" window.innerWidth")]),e._v(" "),o("p",[o("strong",[e._v("MDN 定义如下：")])]),e._v(" "),o("p",[e._v("Width (in pixels) of the browser window viewport including, if rendered, the vertical scrollbar.")]),e._v(" "),o("p",[e._v("浏览器视口（viewport）宽度（单位：像素），如果存在垂直滚动条则包括它。")]),e._v(" "),o("p",[e._v("The "),o("code",[e._v("innerWidth")]),e._v(" property is supported in any window object like a window, a frame, a frameset, or a secondary window.")]),e._v(" "),o("p",[o("code",[e._v("innerWidth")]),e._v(" 属性被任一 window 对象支持，如 window、frame、frameset 或 secondary window。")]),e._v(" "),o("p",[o("strong",[e._v("解释：")])]),e._v(" "),o("p",[e._v("只读属性，声明了窗口的文档显示区的高度和宽度，以像素计。")]),e._v(" "),o("p",[e._v("这里的宽度和高度不包括菜单栏、工具栏以及滚动条等的高度。")]),e._v(" "),o("p",[e._v("IE 不支持这些属性。它用 "),o("code",[e._v("document.documentElement")]),e._v(" 或 "),o("code",[e._v("document.body")]),e._v(" （与 IE 的版本相关）的 "),o("code",[e._v("clientWidth")]),e._v(" 和 "),o("code",[e._v("clientHeight")]),e._v(" 属性作为替代。")]),e._v(" "),o("h1",{attrs:{id:"window-outerwidth"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#window-outerwidth"}},[e._v("#")]),e._v(" window.outerWidth")]),e._v(" "),o("p",[o("strong",[e._v("MDN 定义如下：")])]),e._v(" "),o("p",[o("code",[e._v("Window.outerWidth")]),e._v(" read-only property returns the width of the outside of the browser window.\nIt represents the width of the whole browser window including sidebar (if expanded), window chrome and window resizing borders/handles.")]),e._v(" "),o("p",[o("code",[e._v("Window.outerWidth")]),e._v(" 获取浏览器窗口外部的宽度。表示整个浏览器窗口的宽度，包括侧边栏（如果存在）、窗口镶边（window chrome）和调正窗口大小的边框（window resizing borders/handles）。")]),e._v(" "),o("p",[e._v("To change the size of a window, see "),o("code",[e._v("window.resizeBy()")]),e._v(" and "),o("code",[e._v("window.resizeTo()")]),e._v(".")]),e._v(" "),o("p",[e._v("要改变一个窗口的大小，可参考 "),o("code",[e._v("window.resizeBy()")]),e._v(" 和 "),o("code",[e._v("window.resizeTo()")]),e._v("。")]),e._v(" "),o("p",[e._v("To get the inner width of a window, i.e. the width of the page being displayed, see "),o("code",[e._v("window.innerWidth")]),e._v(".")]),e._v(" "),o("p",[e._v("要获取一个窗口的内层宽度（inner width），即页面被展示的区域，请参考 "),o("code",[e._v("window.innerWidth")]),e._v("。")]),e._v(" "),o("p",[o("strong",[e._v("提示：")])]),e._v(" "),o("p",[e._v("IE 不支持此属性，且没有提供替代的属性。")]),e._v(" "),o("h1",{attrs:{id:"window-screen-width"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#window-screen-width"}},[e._v("#")]),e._v(" window.screen.width")]),e._v(" "),o("p",[o("strong",[e._v("MDN 定义如下：")])]),e._v(" "),o("p",[e._v("Note that not all of the width given by this property may be available to the window itself.\nWhen other widgets occupy space that cannot be used by the window object, there is a difference in "),o("code",[e._v("window.screen.width")]),e._v(" and "),o("code",[e._v("window.screen.availWidth")]),e._v(".")]),e._v(" "),o("p",[e._v("注意，该属性返回的宽度值不一定就是浏览器窗口可使用的宽度。当有其他小工具占据了屏幕空间时，浏览器有时不能占用小工具（如任务栏）占据的空间。"),o("code",[e._v("window.screen.width")]),e._v(" 和 "),o("code",[e._v("window.screen.availWidth")]),e._v(" 两者不同。")]),e._v(" "),o("p",[e._v("Internet Explorer will take into account the zoom setting when reporting the screen width.\nIt will only return the real width of the screen if the zoom is set to 100%.")]),e._v(" "),o("p",[e._v("在返回该值时，IE 会考虑缩放设置。只有在缩放比例为 100% 时，IE 才返回真实的屏幕宽度。")]),e._v(" "),o("p",[o("strong",[e._v("综上所述：")])]),e._v(" "),o("p",[o("code",[e._v("window.screen.width")]),e._v(" 属性声明了显示浏览器的屏幕的宽度。")]),e._v(" "),o("h1",{attrs:{id:"window-screen-availwidth"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#window-screen-availwidth"}},[e._v("#")]),e._v(" window.screen.availWidth")]),e._v(" "),o("p",[o("strong",[e._v("MDN 定义如下：")])]),e._v(" "),o("p",[e._v("The "),o("code",[e._v("Screen.availWidth")]),e._v(" property returns the amount of horizontal space (in pixels) available to the window.")]),e._v(" "),o("p",[e._v("返回浏览器窗口可占用的水平宽度（单位：像素）。")]),e._v(" "),o("p",[o("strong",[e._v("解释：")])]),e._v(" "),o("p",[o("code",[e._v("window.screen.availWidth")]),e._v(" 属性声明了显示浏览器的屏幕的可用宽度，以像素计。\n在 Windows 这样的操作系统中，这个可用高度不包括分配给半永久特性（如屏幕底部的任务栏）的垂直空间。")]),e._v(" "),o("h1",{attrs:{id:"element-getboundingclientrect"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#element-getboundingclientrect"}},[e._v("#")]),e._v(" Element.getBoundingClientRect")]),e._v(" "),o("p",[o("strong",[e._v("MDN 定义如下：")])]),e._v(" "),o("p",[o("img",{attrs:{src:"https://imgs-1251264059.cos.ap-chengdu.myqcloud.com/444c0f67-6388-4f52-837d-f68c296ab317.png",alt:"UTOOLS1557743206128.png"}})]),e._v(" "),o("p",[e._v("The "),o("code",[e._v("Element.getBoundingClientRect()")]),e._v(" method returns the size of an element and its position relative to the viewport.")]),e._v(" "),o("p",[o("code",[e._v("Element.getBoundingClientRect()")]),e._v(" 方法返回元素的大小及其相对于视口的位置。")]),e._v(" "),o("p",[e._v("The returned value is a DOMRect object which is the union of the rectangles returned by "),o("code",[e._v("getClientRects()")]),e._v(" for the element, i.e., the CSS border-boxes associated with the element.\nThe result is the smallest rectangle which contains the entire element, with read-only left, top, right, bottom, x, y, width, and height properties describing the overall border-box in pixels.\nProperties other than width and height are relative to the top-left of the viewport.")]),e._v(" "),o("p",[e._v("返回值是一个 DOMRect 对象，这个对象是由该元素的 "),o("code",[e._v("getClientRects()")]),e._v(" 方法返回的一组矩形的集合, 即：是与该元素相关的 CSS 边框集合 。\nDOMRect 对象包含了一组用于描述边框的只读属性——left、top、right 和 bottom，单位为像素。除了 width 和 height 外的属性都是相对于视口的左上角位置而言的。")]),e._v(" "),o("p",[e._v("Empty border-boxes are completely ignored. If all the element's border-boxes are empty, then a rectangle is returned with a width and height of zero and where the top and left are the top-left of the border-box for the first CSS box (in content order) for the element.")]),e._v(" "),o("p",[e._v("空边框盒（译者注：没有内容的边框）会被忽略。如果所有的元素边框都是空边框，那么这个矩形给该元素返回的 width、height 值为 0，left、top 值为第一个 css 盒子（按内容顺序）的 top-left 值。")]),e._v(" "),o("p",[e._v("The amount of scrolling that has been done of the viewport area (or any other scrollable element) is taken into account when computing the bounding rectangle.\nThis means that the rectangle's boundary edges (top, right, bottom, left) change their values every time the scrolling position changes (because their values are relative to the viewport and not absolute).")]),e._v(" "),o("p",[e._v("当计算边界矩形时，会考虑视口区域（或其他可滚动元素）内的滚动操作，也就是说，当滚动位置发生了改变，top 和 left 属性值就会随之立即发生变化（因此，它们的值是相对于视口的，而不是绝对的）。")]),e._v(" "),o("p",[e._v("If you need the bounding rectangle relative to the top-left corner of the document, just add the current scrolling position to the top and left properties (these can be obtained using "),o("code",[e._v("window.scrollX")]),e._v(" and "),o("code",[e._v("window.scrollY")]),e._v(") to get a bounding rectangle which is independent from the current scrolling position.")]),e._v(" "),o("p",[e._v("如果你需要获得相对于整个网页左上角定位的属性值，那么只要给 top、left 属性值加上当前的滚动位置（通过 "),o("code",[e._v("window.scrollX")]),e._v(" 和 "),o("code",[e._v("window.scrollY")]),e._v("），这样就可以获取与当前的滚动位置无关的值。")]),e._v(" "),o("p",[e._v("Scripts requiring high cross-browser compatibility can use "),o("code",[e._v("window.pageXOffset")]),e._v(" and "),o("code",[e._v("window.pageYOffset")]),e._v(" instead of "),o("code",[e._v("window.scrollX")]),e._v(" and "),o("code",[e._v("window.scrollY")]),e._v(".")]),e._v(" "),o("p",[e._v("为了跨浏览器兼容，请使用 "),o("code",[e._v("window.pageXOffset")]),e._v(" 和 "),o("code",[e._v("window.pageYOffset")]),e._v(" 代替 "),o("code",[e._v("window.scrollX")]),e._v(" 和 "),o("code",[e._v("window.scrollY")]),e._v("。")]),e._v(" "),o("p",[o("strong",[e._v("解释：")])]),e._v(" "),o("p",[o("code",[e._v("Element.getBoundingClientRect")]),e._v(" 方法返回一个对象（"),o("code",[e._v("DOMRect")]),e._v("），提供当前元素节点的大小、位置等信息，基本上就是 CSS 盒状模型的所有信息。")]),e._v(" "),o("ul",[o("li",[e._v("x：元素左上角相对于视口的横坐标")]),e._v(" "),o("li",[e._v("y：元素左上角相对于视口的纵坐标")]),e._v(" "),o("li",[e._v("height：元素高度")]),e._v(" "),o("li",[e._v("width：元素宽度")]),e._v(" "),o("li",[e._v("left：元素左上角相对于视口的横坐标，与 x 属性相等")]),e._v(" "),o("li",[e._v("right：元素右边界相对于视口的横坐标（等于 x + width）")]),e._v(" "),o("li",[e._v("top：元素顶部相对于视口的纵坐标，与 y 属性相等")]),e._v(" "),o("li",[e._v("bottom：元素底部相对于视口的纵坐标（等于 y + height）")])]),e._v(" "),o("p",[e._v("由于元素相对于视口（"),o("code",[e._v("viewport")]),e._v("）的位置，会随着页面滚动变化，因此表示位置的四个属性值，都不是固定不变的。\n如果想得到绝对位置，可以将 "),o("code",[e._v("left")]),e._v(" 属性加上 "),o("code",[e._v("window.scrollX")]),e._v("，"),o("code",[e._v("top")]),e._v(" 属性加上"),o("code",[e._v("window.scrollY")]),e._v("。")]),e._v(" "),o("p",[e._v("注意，"),o("code",[e._v("getBoundingClientRect")]),e._v(" 方法的所有属性，都把边框（"),o("code",[e._v("border")]),e._v(" 属性）算作元素的一部分。\n也就是说，都是从边框外缘的各个点来计算。因此，"),o("code",[e._v("width")]),e._v(" 和 "),o("code",[e._v("height")]),e._v(" 包括了元素本身 + "),o("code",[e._v("padding")]),e._v(" + "),o("code",[e._v("border")]),e._v("。")]),e._v(" "),o("p",[e._v("另外，上面的这些属性，都是继承自原型的属性，"),o("code",[e._v("Object.keys")]),e._v(" 会返回一个空数组，这一点也需要注意。")])])}),[],!1,null,null,null);t.default=i.exports}}]);