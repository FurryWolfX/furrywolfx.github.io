(window.webpackJsonp=window.webpackJsonp||[]).push([[161],{413:function(t,s,a){"use strict";a.r(s);var e=a(5),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("一个完整计算机的体系结构包括：硬件与软件，而软件又分为系统软件与应用软件，负责对硬件仅需管理与操作的是系统软件的内核部分，用户是无法与硬件或内核打交道的，用户通过应用程序或部分系统软件发出指令（可能是通过浏览器发送一封邮件)，这些指令会被翻译并传给内核，内核在得知用户的需求后调度硬件资源来完成操作（比如，使用网卡发送数据包)。")]),t._v(" "),a("p",[t._v("在 Linux 环境下，我们一般通过 Shell 来与内核交流，并最终实现我们想要使用计算机资源的目的。由于 Linux 的开放性特点，使得在 Linux 下对 Shell 的选择也很多，CentOS 6.3 系统中可以使用的 Shell 有 /bin/sh、/bin/bash、/bin/tcsh、/bin/csh 这几种，/etc/shells 文件说明了当前系统有哪些可用的 Shell。不同的 Shell 有不同的特点以及操作方式，我们这里以 CentOS 默认使用的 Shell 为讲解案例即 Bash。")]),t._v(" "),a("h1",{attrs:{id:"bash-功能介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bash-功能介绍"}},[t._v("#")]),t._v(" BASH 功能介绍")]),t._v(" "),a("h2",{attrs:{id:"命令历史"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#命令历史"}},[t._v("#")]),t._v(" 命令历史")]),t._v(" "),a("p",[t._v("Bash 拥有自动记录命令历史的功能，用户所执行的命令会在注销时自动记录到自己家目录下的。bash_history 这样一个隐藏文件中。查看这些命令历史记录的方法有很多，可以通过直接打开文件来查看，也可以通过键盘的上下键来上翻或下翻历史记录，还可以通过 history 命令查看历史记录，所有的命令历史都有记录编号。命令历史能够记录的信息数量由 HISTSIZE 变量所决定，CentOS 6.3 默认通过 /etc/profile 文件定义了 HISTSIZE=1000，也就是最多可以记录最近所使用的 1000 条命令，当有第 1001 条命令执行时第一条命令会被覆盖，执行 history -c 命令可以清空所有的历史记录。")]),t._v(" "),a("p",[t._v("记录命令历史的除了可以查看历史记录外，还可以在需要时直接调用历史记录再次执行该命令：")]),t._v(" "),a("p",[t._v("1). 上下键翻阅历史命令，找到合适的命令后直接回车即可执行。")]),t._v(" "),a("p",[t._v("2). 输入！string 调用命令历史 (string 为关键字)，如！vim 将调用最后一次执行的以 vim 开头的命令。或者通过！n 来准确定位历史记录，如！242 将直接调用命令历史的第 242 条记录并执行。")]),t._v(" "),a("p",[t._v("3). 通过 Ctrl+r 快捷键打开搜索功能，接着输入关键字即可在命令历史中搜索相关命令，回车完成执行操作。如果没有搜索到适合的命令按 ESC 键退出搜索。")]),t._v(" "),a("h2",{attrs:{id:"命令别名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#命令别名"}},[t._v("#")]),t._v(" 命令别名")]),t._v(" "),a("p",[t._v("在 CentOS 6.3 系统中我们可以直接使用 ll 命令来显示文件的详细信息，其实系统中并没有 ll 这样一个命令，它仅是被提前定义好的一个别名而已，别名的好处是可以把本来很长的指令简化缩写，为常用且复杂的命令及选项创建别名可以大大提高日常工作效率。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://imgs-1251264059.coscd.myqcloud.com/595852df-053f-54c7-6924-17dabd872718.jpg",alt:"title"}})]),t._v(" "),a("h2",{attrs:{id:"管道与重定向"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#管道与重定向"}},[t._v("#")]),t._v(" 管道与重定向")]),t._v(" "),a("p",[t._v("Bash 的标准输入设备是键盘、鼠标、手写板等设备，标准输出为显示器，一般我们通过键盘输入命令并执行，系统将返回信息显示在屏幕上，默认不管是正确的还是错误的信息都将输出至显示器。标准输入的文件描述符为 0，标准输出的文件描述符为 1，错误输出的文件描述符为 2。但有时我们需要改变这样的标准输入与输出方式，Linux 中我们可以使用重定向符 (<、>、<<、>>、|) 重新定义输入与输出。")]),t._v(" "),a("p",[t._v("管道使得我们可以将多条命令连接在一起使用，它的作用是将一个命令的标准输出重定向给下一个命令并作为该命令的标准输入。例如，使用 ifconfig eth0 | grep ‘inet addr’命令过滤包含 IP 地址的行，ifconfig 本身会输出大量网络接口的信息，由于这里使用了管道符号 (|) 所以 ifconfig 命令的所有输出都将作为 grep 命令的输入内容，最终实现过滤包含 IP 地址的行。")]),t._v(" "),a("p",[t._v("对于标准的输出信息是输出至显示器，而有时你可能并不需要这些输出信息，又或者是暂时不需要在屏幕上看到这些信息；另外对于输入一般是通过键盘输入，而有时你或许希望可以从文件中读取输入信息。输出重定向可以使用》或》>符号，使用》可以将输出导入至文件，如果文件不存在则创建该文件，如果文件已经存在则会覆盖该文件的内容；而使用》>可以将输出追加至文件；另外，对应错误信息的重定向需要使用 2>或 2>>符号实现。输入重定向可以使用《符号，它可以可以帮助我们从文件中提取输入信息。")]),t._v(" "),a("p",[t._v("以下通过几个简单的实例演示重定向的使用方法：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://imgs-1251264059.coscd.myqcloud.com/a94dbb13-17a5-6dbc-f696-64ff9781ff27.jpg",alt:"title"}})]),t._v(" "),a("h2",{attrs:{id:"快捷键"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#快捷键"}},[t._v("#")]),t._v(" 快捷键")]),t._v(" "),a("p",[t._v("Bash 准备了大量的快捷键为用户使用，熟练掌握这些快捷键的全部或部分会使你在工作中受益颇多，开始的时候你可能需要花费大量的时间来记忆这些快捷键，但一旦你记住了他们，你的工作效率会直线上升。下面列出了常用的快捷键及其功能描述。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://imgs-1251264059.coscd.myqcloud.com/f3446d37-cf86-3c65-61ce-d120faf43428.jpg",alt:"title"}})]),t._v(" "),a("h1",{attrs:{id:"bash-使用技巧"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bash-使用技巧"}},[t._v("#")]),t._v(" BASH 使用技巧")]),t._v(" "),a("h2",{attrs:{id:"重定向技巧"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重定向技巧"}},[t._v("#")]),t._v(" 重定向技巧")]),t._v(" "),a("p",[t._v("1). 如果你编写了一个脚本实现自动修改系统帐号的密码，那么默认当密码修改成功后系统会提示 successfully 这样的提示信息，如果需要修改 20 个账户密码则显示 20 条这样的信息。像这样的案例，大量的成功提示信息并不是我们关注的重点，管理员更多的是关心错误提示。所以这时可以考虑将标准正确输出屏蔽，Linux 中提供了一个特殊设备 /dev/null，它很像太阳黑洞，任何东西往里写入都将永远消失。对大量无意义的输出信息可以通过管道导入至 /dev/null 设备。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://imgs-1251264059.coscd.myqcloud.com/762fe4e0-f09e-301f-e831-96fea36a93c5.jpg",alt:"title"}})]),t._v(" "),a("p",[t._v("2). 标准输出与错误输出分离重定向")]),t._v(" "),a("p",[t._v("很多时候自动运行的脚本编写完成后，是要在深夜服务器负载最低时以无人职守方式运行的，那么当管理员去检查脚本运行情况时会希望看到哪些命令执行成功了，哪些命令出现了问题，并且为了方便管理需要将正确输出与错误输出分写保存在两个不同的记录文件中，那么分离重定向就显得尤为重要了。下面我们检查系统中是否存在 tom 用户，如果存在则将 tom 相关信息记录至 user 文件中，否则记录至 error 文件中：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://imgs-1251264059.coscd.myqcloud.com/8e7ddd58-3bb7-46b6-46c7-7a9b3ac0d315.jpg",alt:"title"}})]),t._v(" "),a("h2",{attrs:{id:"命令序列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#命令序列"}},[t._v("#")]),t._v(" 命令序列")]),t._v(" "),a("p",[t._v("在 Linux 中我们可以使用控制字符 (;、&&、||、&) 来控制命令的执行方式。其中 [&] 控制符使得命令开启一个子 Shelll 并在后台执行；使用 [;] 控制字符可以把多个命令组合，但多个命令之间没有任何逻辑上的关系，仅按循序执行；使用 [&&] 控制字符也可以将多个命令组合，但仅当前一个命令执行成功后才会执行 [&&] 控制符后面的命令；[||] 控制字符的作用与 [&&] 刚好相反，仅当前一个命令执行失败才会执行 [||] 控制符后面的命令。下面通过实例演示。")]),t._v(" "),a("p",[t._v("1). 火狐浏览器通过前端启动，使得当前 Shell 将暂时无法使用：")]),t._v(" "),a("p",[a("code",[t._v("[root@centos6 ~]# firefox")])]),t._v(" "),a("p",[t._v("2). 后台运行浏览器，不影响当前 Shell 的使用：")]),t._v(" "),a("p",[a("code",[t._v("[root@centos6 ~]# firefox &")])]),t._v(" "),a("p",[t._v("3). 所有命令按顺序执行（不管前面的命令是否成功，后面的命令一定正常执行)：")]),t._v(" "),a("p",[a("code",[t._v("[root@centos6 ~]# ls /tmp ; ls /root ; ls /home")])]),t._v(" "),a("p",[t._v("4). 如果某个文件存在则显示该文件内容，否则报错（仅当 ls 执行成功才会执行 cat)：")]),t._v(" "),a("p",[a("code",[t._v("[root@centos6 ~]# ls test.txt && cat test.txt")])]),t._v(" "),a("p",[t._v("5). 如果有 gedit 编辑器则打开该程序，否则打开 vim 编辑器：")]),t._v(" "),a("p",[a("code",[t._v("[root@centos6 ~]# gedit || vim")])]),t._v(" "),a("p",[t._v("6). 如果 id tom 执行成功则说明用户存在屏幕将显示 Hi,tom，否则显示 No such user：")]),t._v(" "),a("p",[a("code",[t._v("[root@centos6 ~]# id tom &>/dev/null && echo “Hi,tom” || echo “No such user”")])]),t._v(" "),a("p",[t._v("实例 5 首先通过 &>重定向符将 id 命令的所有输出屏蔽，让后使用 && 与||来判断 id 命令是否执行成功，成功就显示问候语否则显示没有该用户。")]),t._v(" "),a("h1",{attrs:{id:"作业控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作业控制"}},[t._v("#")]),t._v(" 作业控制")]),t._v(" "),a("p",[t._v("Bash 环境中通过命令开启进程的时候使用 & 符可以使得该进程进入后台执行，或者一个命令执行后使用 Ctrl+z 快捷键可以将该进程放入后台并暂停执行，以后随时使用 jobs 命令可以查看这些后台进程，并且会为每个这样的进程分配一个编号，通过 fg 《编号》的形式可以将这些后台进程再次调回前台执行。")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root@centos6 ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# firefox &")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root@centos6 ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# jobs")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("+ Running firefox "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root@centos6 ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# fg 1")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("h1",{attrs:{id:"花括号-的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#花括号-的使用"}},[t._v("#")]),t._v(" 花括号{}的使用")]),t._v(" "),a("p",[t._v("通过括号扩展可以生产命令行或脚本需要的字串，括号中可以包含连续的序列或使用逗号分割的多个项目，连续的序列包括一个起点与一个终点并使用。. 分割。接下来看看具体的语法格式案例：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://imgs-1251264059.coscd.myqcloud.com/936c850f-340c-eea9-f6f8-6afc7431a44a.jpg",alt:"title"}})])])}),[],!1,null,null,null);s.default=r.exports}}]);