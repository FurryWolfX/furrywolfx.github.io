import{_ as s,o as n,c as a,Q as p}from"./chunks/framework.5c044c0e.js";const v=JSON.parse('{"title":"如何优雅地比较版本号","description":"","frontmatter":{"title":"如何优雅地比较版本号","catalog":true,"date":"2016-09-28T16:50:24.000Z","subtitle":null,"header-img":null,"tags":["JavaScript"]},"headers":[],"relativePath":"docs/frontend/javascript/js-compare-ver.md","filePath":"docs/frontend/javascript/js-compare-ver.md"}'),l={name:"docs/frontend/javascript/js-compare-ver.md"},o=p(`<h1 id="如何优雅地比较版本号" tabindex="-1">如何优雅地比较版本号 <a class="header-anchor" href="#如何优雅地比较版本号" aria-label="Permalink to &quot;如何优雅地比较版本号&quot;">​</a></h1><p>版本格式: <code>xx.xx.xx</code>, 位数不定</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 比较版本号，如果v1&gt;v2则返回true，否则false</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{Object}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">v1</span><span style="color:#6A737D;"> 服务端版本</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{Object}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">v2</span><span style="color:#6A737D;"> 客户端实际版本</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">compareVer</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">v1</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">v2</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  v1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> v1.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;.&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  v2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> v2.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;.&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> v1.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">parseInt</span><span style="color:#E1E4E8;">(v1[i]) </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseInt</span><span style="color:#E1E4E8;">(v2[i])) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">parseInt</span><span style="color:#E1E4E8;">(v1[i]) </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseInt</span><span style="color:#E1E4E8;">(v2[i])) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">compareVer</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;3.0.11&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;3.0.12&quot;</span><span style="color:#E1E4E8;">));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 比较版本号，如果v1&gt;v2则返回true，否则false</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{Object}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">v1</span><span style="color:#6A737D;"> 服务端版本</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{Object}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">v2</span><span style="color:#6A737D;"> 客户端实际版本</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">compareVer</span><span style="color:#24292E;">(</span><span style="color:#E36209;">v1</span><span style="color:#24292E;">, </span><span style="color:#E36209;">v2</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  v1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> v1.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  v2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> v2.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> v1.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">parseInt</span><span style="color:#24292E;">(v1[i]) </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseInt</span><span style="color:#24292E;">(v2[i])) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">parseInt</span><span style="color:#24292E;">(v1[i]) </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseInt</span><span style="color:#24292E;">(v2[i])) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">compareVer</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;3.0.11&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;3.0.12&quot;</span><span style="color:#24292E;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div>`,3),e=[o];function r(t,c,y,E,i,F){return n(),a("div",null,e)}const b=s(l,[["render",r]]);export{v as __pageData,b as default};
