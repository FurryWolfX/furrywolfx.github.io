import{_ as i,c as a,a3 as e,o as n}from"./chunks/framework.CDetKDz4.js";const c=JSON.parse('{"title":"OpenHarmony开发：XTS环境搭建和开发步骤","description":"","frontmatter":{"title":"OpenHarmony开发：XTS环境搭建和开发步骤","date":"2024-05-31T00:00:00.000Z","tags":["OpenHarmony"]},"headers":[],"relativePath":"docs/frontend/ohos/009-xts.md","filePath":"docs/frontend/ohos/009-xts.md"}'),l={name:"docs/frontend/ohos/009-xts.md"};function t(p,s,h,r,d,k){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="openharmony-开发-xts-环境搭建和开发步骤" tabindex="-1">OpenHarmony 开发：XTS 环境搭建和开发步骤 <a class="header-anchor" href="#openharmony-开发-xts-环境搭建和开发步骤" aria-label="Permalink to &quot;OpenHarmony 开发：XTS 环境搭建和开发步骤&quot;">​</a></h1><h2 id="wsl" tabindex="-1">WSL <a class="header-anchor" href="#wsl" aria-label="Permalink to &quot;WSL&quot;">​</a></h2><h3 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h3><ol><li><p>开启 Linux 子系统选项：控制面板-&gt; 程序-&gt;开启或关闭 Windows 功能-&gt;勾选: 适用于 Linux 的 Windows 子系统</p></li><li><p>在应用商店安装：Ubuntu-22.04 LTS</p></li><li><p>启动：Ubuntu-22.04 LTS 添加用户并设置密码</p></li></ol><h3 id="wsl-迁移到非系统盘" tabindex="-1">WSL 迁移到非系统盘 <a class="header-anchor" href="#wsl-迁移到非系统盘" aria-label="Permalink to &quot;WSL 迁移到非系统盘&quot;">​</a></h3><p>以管理身份启动终端</p><p>查看 wsl 下的 Linux 是否为 stopped 状态</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">C:\\Users\\xxx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">wsl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  NAME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            STATE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">           VERSION</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ubuntu-xx.xx    Running         2</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 如果不是执行shutdown</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">C:\\Users\\xxx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">wsl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --shutdown</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ubuntu-xx.xx</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>将 wsl 导出到目标盘并导入</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#1. 导出到目标盘</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">C:\\Users\\xxx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">wsl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --export</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Ubuntu-xx.xx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> D:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">buntu-xx.xx.tar</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#2.注销wsl</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">C:\\Users\\xxx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">wsl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --unregister</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Ubuntu-xx.xx</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#3.导入wsl：wsl --import &lt;wsl的名字&gt; &lt;wsl安装路径，必须要有一级目录，磁盘根目录不行&gt; &lt;导出的包名&gt; &lt;wsl版本&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">C:\\Users\\xxx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">wsl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Ubuntu-xx.xx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> D:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\U</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">buntu-xx.xx</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">D:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">buntu-xx.xx.tar</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --version</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#4.以普通用户登录(不执行这句默认以root登录) --- (我起名Ubuntu-22.04,所以这里是ubuntu2204.exe)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">C:\\Users\\xxx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ubuntuxxxx.exe</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --default-user</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 用户名</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>注：<code>wsl1</code> 升 <code>wsl2</code> 的命令 <code>wsl --set-version Ubuntu-xx.xx 2</code></p><p>注：如果 <code>wsl</code> 版本较低，可以执行 <code>wsl --update</code></p><p>注：如果缺少虚拟机组件，可以执行 <code>dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</code></p><p>更新环境</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dist-upgrade</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>切换为 bash</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ln</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -fs</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /bin/bash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /bin/sh</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # dash 切换为bash</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="依赖" tabindex="-1">依赖 <a class="header-anchor" href="#依赖" aria-label="Permalink to &quot;依赖&quot;">​</a></h2><h3 id="安装-1" tabindex="-1">安装 <a class="header-anchor" href="#安装-1" aria-label="Permalink to &quot;安装&quot;">​</a></h3><p><code>sudo apt-get update &amp;&amp; sudo apt-get install binutils git git-lfs gnupg flex bison gperf build-essential zip curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 lib32ncurses5-dev x11proto-core-dev libx11-dev genext2fs liblz4-tool libssl-dev libtinfo5 lib32z1-dev ccache libgl1-mesa-dev libxml2-utils xsltproc unzip m4 bc gnutls-bin python3 python3-pip ruby</code></p><h3 id="java" tabindex="-1">Java <a class="header-anchor" href="#java" aria-label="Permalink to &quot;Java&quot;">​</a></h3><p>执行 java --version 看是否有 java 的环境，没有的话安装下</p><p><code>sudo apt install openjdk-17-jdk-headless</code></p><h3 id="repo" tabindex="-1">repo <a class="header-anchor" href="#repo" aria-label="Permalink to &quot;repo&quot;">​</a></h3><ol><li>进入 <code>root</code> 模式，命令行输入 <code>sudo su</code></li><li>命令行输入<code>curl -s https://gitee.com/oschina/repo/raw/fork_flow/repo-py3 &gt; /usr/local/bin/repo</code></li><li><code>chmod a+x /usr/local/bin/repo</code></li><li><code>exit</code></li><li><code>pip3 install -i https://repo.huaweicloud.com/repository/pypi/simple requests</code></li><li>链接 <code>python3</code> 到 <code>/usr/bin/python</code>, <code>/usr/local/bin/repo</code> 到 <code>/usr/bin/repo</code></li></ol><h3 id="附-repo-强制-sync-的方法" tabindex="-1">附 repo 强制 sync 的方法 <a class="header-anchor" href="#附-repo-强制-sync-的方法" aria-label="Permalink to &quot;附 repo 强制 sync 的方法&quot;">​</a></h3><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">repo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> forall</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;git reset --hard; git clean -fd&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果想保留工作区的内容：</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">repo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> forall</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;git reset --mixed; git clean -fd&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>强制同步单个仓：</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">repo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> forall</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;git reset --hard; git clean -fd&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>同步到锁定的版本：</p><p>先在指定版本的环境上导出 xml：</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">repo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> manifest</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> manifest-new.xml</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>将上面生成的 <code>manifest-new.xml</code> 文件 拷贝到 <code>.repo/manifests</code> 目录下</p><p>把 <code>.repo/manifest.xml</code> 这个文件中 <code>name</code> 字段值替换成 上面生成的文件 <code>manifest-new.xml</code> 然后再 <code>repo sync -c</code> 进行更新即可</p><h2 id="下载代码" tabindex="-1">下载代码 <a class="header-anchor" href="#下载代码" aria-label="Permalink to &quot;下载代码&quot;">​</a></h2><h3 id="设置-git" tabindex="-1">设置 git <a class="header-anchor" href="#设置-git" aria-label="Permalink to &quot;设置 git&quot;">​</a></h3><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user.name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;yourname&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user.email</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;your-email-address&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="用-repo-下载代码" tabindex="-1">用 repo 下载代码 <a class="header-anchor" href="#用-repo-下载代码" aria-label="Permalink to &quot;用 repo 下载代码&quot;">​</a></h3><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> code</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chmod</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 777</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -R</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> code</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> code</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">repo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://gitee.com/openharmony/manifest.git</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-repo-verify</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">repo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sync</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">repo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> forall</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;git lfs pull&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="预编译" tabindex="-1">预编译 <a class="header-anchor" href="#预编译" aria-label="Permalink to &quot;预编译&quot;">​</a></h3><p>在源码根目录（创建的 <code>code</code> 目录）下执行 <code>prebuilts</code>, 安装编译器及二进制工具</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./build/prebuilts_download.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-check-certificatie</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -skip-ssl</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="编译源码" tabindex="-1">编译源码 <a class="header-anchor" href="#编译源码" aria-label="Permalink to &quot;编译源码&quot;">​</a></h3><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./build.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --product-name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rk3568</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="编译测试用例" tabindex="-1">编译测试用例 <a class="header-anchor" href="#编译测试用例" aria-label="Permalink to &quot;编译测试用例&quot;">​</a></h3><p>先执行 <code>ln -s /usr/lib/x86_64-linux-gnu/libffi.so.8 /usr/lib/x86_64-linux-gnu/libffi.so.6</code></p><p>进入源码根目录 <code>cd test/xts/acts</code>，执行命令</p><p>全量：<code>./build.sh product_name=rk3568</code></p><p>单个：<code>./build.sh product_name=rk3568 system_size=standard suite=ActsWindowStageTest (测试套名称)</code></p><p>如果报错需要修改 <code>test/xts/acts/check_hvigor.py</code></p><div class="language-py vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __name__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;__main__&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # this_file = os.path.realpath(__file__)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # acts_root_dir = os.path.dirname(this_file)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # hvigor_prj_list = get_hvigor_prject_list(acts_root_dir)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # js_valid = check_hvigor_wrapper_js(acts_root_dir, hvigor_prj_list)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # json_valid = check_hvigor_version(hvigor_prj_list)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # if not js_valid or not json_valid:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    #     sys.exit(1)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sys.exit(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="下载镜像" tabindex="-1">下载镜像 <a class="header-anchor" href="#下载镜像" aria-label="Permalink to &quot;下载镜像&quot;">​</a></h3><p>到 <code>gitee</code> 上下载最新的镜像--选择最新的转测时间中的 <code>rk3568</code> 版本下载 <a href="https://gitee.com/openharmony-sig/oh-inner-release-management/blob/master/Release-Testing-Version.md" target="_blank" rel="noreferrer">https://gitee.com/openharmony-sig/oh-inner-release-management/blob/master/Release-Testing-Version.md</a></p><p>镜像解压到一个文件夹中  <code>D:\\xtsImage</code>，这个工具可以在 <code>windows</code> 上跑 <code>ubuntu</code> 下编译出来的 <code>ActsWindowStageTest.hap</code>。</p><p>进入 <code>xtsImage\\suites\\acts\\config</code>  中的 <code>user_config.xml</code>，做如下修改：</p><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;127.0.0.1&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;8710&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 设备号，cmd 执行命令 hdc list targets 查看 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">sn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;4501004456343033320121df0a2eba00&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">sn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>在 <code>xtsImage\\suites\\acts\\testcases\\</code> 目录中的 <code>module_info.list</code> 文件中最后一行添加  <code>ActsWindowStageTest ActsWindowStageTest</code></p><p>把 <code>\\\\wsl$\\Ubuntu-20.04\\home\\xxx\\xtsProject\\out\\rk3568\\suites\\acts\\testcases\\</code> 目录下的 <code>ActsWindowStageTest.hap</code> 和 <code>ActsWindowStageTest.json</code> 文件复制到 <code>xtsImage\\suites\\acts\\testcases</code> 文件夹中。</p><p><code>win</code> 下通过 <code>choco</code> 安装 <code>python3.7</code></p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Set-ExecutionPolicy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Bypass</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Scope</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Process</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Force</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; [System.Net.ServicePointManager]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:SecurityProtocol</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">iex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ((New-Object </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">System.Net.WebClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).DownloadString(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;https://community.chocolatey.org/install.ps1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">choco</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python37</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>双击 <code>xtsImage\\suites\\acts\\</code> 目录中的 <code>run.bat</code> 文件，执行命令 <code>run -l ActsWindowStageTest</code></p><h2 id="编写用例" tabindex="-1">编写用例 <a class="header-anchor" href="#编写用例" aria-label="Permalink to &quot;编写用例&quot;">​</a></h2><p>在 <code>\\\\wsl$\\Ubuntu-20.04\\home\\xxx\\code\\master\\test\\xts\\acts\\graphic\\windowStage\\entry\\src\\main\\ets\\test\\</code> 中编写用例</p><p><code>Ubuntu</code>  执行编译 <code>./build.sh product_name=rk3568 system_size=standard suite=ActsWindowStageTest</code></p><h3 id="也可用以下命令增量编译" tabindex="-1">也可用以下命令增量编译： <a class="header-anchor" href="#也可用以下命令增量编译" aria-label="Permalink to &quot;也可用以下命令增量编译：&quot;">​</a></h3><p><code>~/code/prebuilts/build-tools/linux-x86/bin/ninja -w dupbuild=warn -C ~/code/out/rk3568 deploy_testtools ActsGraphicXTSDrawingNapiTest</code></p><h3 id="复制用例" tabindex="-1">复制用例 <a class="header-anchor" href="#复制用例" aria-label="Permalink to &quot;复制用例&quot;">​</a></h3><p>命令后生成的 <code>hap</code> 和 <code>json</code> 文件路径：<code>\\\\wsl$\\Ubuntu-20.04\\home\\xxx\\code\\master\\out\\rk3568\\suites\\acts\\testcases\\</code></p><h3 id="用-xts-测试套件测试你的用例" tabindex="-1">用 XTS 测试套件测试你的用例 <a class="header-anchor" href="#用-xts-测试套件测试你的用例" aria-label="Permalink to &quot;用 XTS 测试套件测试你的用例&quot;">​</a></h3><p>把 <code>\\\\wsl$\\Ubuntu-20.04\\home\\xxx\\xtsProject\\out\\rk3568\\suites\\acts\\testcases\\</code> 目录下的 <code>ActsWindowStageTest.hap</code> 和 <code>ActsWindowStageTest.json</code> 文件复制到 <code>xtsImage\\suites\\acts\\testcases</code> 文件夹中。</p><p>双击 <code>xtsImage\\suites\\acts\\</code> 目录中的 <code>run.bat</code> 文件，执行命令 <code>run -l ActsWindowStageTest</code></p><h3 id="在板子上直接运行用例-可选" tabindex="-1">在板子上直接运行用例（可选） <a class="header-anchor" href="#在板子上直接运行用例-可选" aria-label="Permalink to &quot;在板子上直接运行用例（可选）&quot;">​</a></h3><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hdc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> send</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ActsGraphicXTSDrawingNapiTest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /data/local/tmp</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hdc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> shell</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /data/local/tmp</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chmod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ActsGraphicXTSDrawingNapiTest</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./ActsGraphicXTSDrawingNapiTest</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="查看板子上的日志-可选" tabindex="-1">查看板子上的日志（可选） <a class="header-anchor" href="#查看板子上的日志-可选" aria-label="Permalink to &quot;查看板子上的日志（可选）&quot;">​</a></h3><p>日志有助于崩溃分析</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /data/log/faultlog/faultlogger/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="cpp-用例的调试" tabindex="-1">CPP 用例的调试 <a class="header-anchor" href="#cpp-用例的调试" aria-label="Permalink to &quot;CPP 用例的调试&quot;">​</a></h3><p><strong>CPP Crash 解析</strong></p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/code/prebuilts/clang/ohos/linux-x86_64/llvm/bin/llvm-addr2line -Cfie </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/code/out/rk3568/lib.unstripped/graphic/graphic_2d/libnative_drawing_ndk.z.so 000937c1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这条命令将从指定的共享库 <code>libnative_drawing_ndk.z.so</code> 中解析地址 <code>000937c1</code>，并输出该地址对应的函数名、文件名和行号信息。</p><p>测试崩溃日志: <code>/data/log/faultlog/temp</code></p><p><strong>说明</strong></p><p><code>llvm-addr2line</code> 是 <code>LLVM</code> 项目中的一个工具，用于将地址转换为符号信息，包括函数名、文件名和行号。</p><p>以下是几个示例命令及其含义：</p><p><code>llvm-addr2line -Cfie &lt;binary&gt; &lt;address&gt;</code>:</p><ul><li><code>-C</code>：将 C++ 符号名还原。</li><li><code>-f</code>：显示函数名。</li><li><code>-i</code>：显示内联帧信息。</li><li><code>-e &lt;binary&gt;</code>：指定要解析的可执行文件或共享库。</li><li><code>&lt;address&gt;</code>：要解析的地址。</li></ul><h2 id="设备连不上的问题" tabindex="-1">设备连不上的问题 <a class="header-anchor" href="#设备连不上的问题" aria-label="Permalink to &quot;设备连不上的问题&quot;">​</a></h2><ol><li><p>复制新版本的 <code>hdc.exe</code> 到 <code>suites/acts/hdc_std.exe</code></p></li><li><p>杀死 <code>hdc</code> 重试</p></li></ol><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">taskkill</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /F</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /IM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hdc.exe</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">taskkill</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /F</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /IM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hdc_std.exe</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="签名工具" tabindex="-1">签名工具 <a class="header-anchor" href="#签名工具" aria-label="Permalink to &quot;签名工具&quot;">​</a></h2><p><a href="https://gitee.com/openharmony/xts_acts/wikis/XTS%E7%AD%BE%E5%90%8D/%E7%AD%BE%E5%90%8D%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%BB%8D" target="_blank" rel="noreferrer">https://gitee.com/openharmony/xts_acts/wikis/XTS签名/签名工具介绍</a></p><h2 id="仓库" tabindex="-1">仓库 <a class="header-anchor" href="#仓库" aria-label="Permalink to &quot;仓库&quot;">​</a></h2><p><a href="https://gitee.com/openharmony/xts_acts/tree/master/graphic/graphicDrawing" target="_blank" rel="noreferrer">https://gitee.com/openharmony/xts_acts/tree/master/graphic/graphicDrawing</a></p><h2 id="接口文档" tabindex="-1">接口文档 <a class="header-anchor" href="#接口文档" aria-label="Permalink to &quot;接口文档&quot;">​</a></h2><p><a href="https://gitee.com/openharmony/docs/blob/master/zh-cn/application-dev/reference/apis-arkgraphics2d" target="_blank" rel="noreferrer">https://gitee.com/openharmony/docs/blob/master/zh-cn/application-dev/reference/apis-arkgraphics2d</a></p><h2 id="vscode-c-插件配置" tabindex="-1">VSCode C++ 插件配置 <a class="header-anchor" href="#vscode-c-插件配置" aria-label="Permalink to &quot;VSCode C++ 插件配置&quot;">​</a></h2><p>c_cpp_properties.json</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;configurations&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Linux&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;includePath&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;~/code/third_party/googletest/googletest/include/**&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;~/code/interface/sdk_c/graphic/graphic_2d/native_drawing/**&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;~/code/foundation/graphic/graphic_2d/rosen/modules/render_service_base/include/**&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;~/code/foundation/graphic/graphic_2d/rosen/modules/2d_graphics/include/**&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;~/code/foundation/graphic/graphic_2d/rosen/modules/2d_graphics/src/**&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;~/code/third_party/skia/**&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;defines&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;compilerPath&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/usr/bin/gcc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;cStandard&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;c11&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;cppStandard&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;c++17&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;intelliSenseMode&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;gcc-x64&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div>`,101)]))}const g=i(l,[["render",t]]);export{c as __pageData,g as default};
